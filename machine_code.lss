
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
000001f4 l     F .text	0000003c array_write
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000145 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000238 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000230 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000278 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
0000025c g     F .text	0000001c memset
00000054 g     F .text	000001a0 main
00000100 g       *ABS*	00000000 __ram_size
00000145  w      .debug_info	00000000 .hidden path_planner.c.2e7442b2
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000278 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    27800593          	addi	x11,x0,632
  1c:	    00000613          	addi	x12,x0,0
  20:	    218000ef          	jal	x1,238 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    228000ef          	jal	x1,25c <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    1f0000ef          	jal	x1,230 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     // ############# Add your code here #############
     ### 
     ###     uint32_t map[30];
     ### 
     ###     map[0] = 0b010000000000000000000000000000;
     ###     map[1] = 0b101000000000000000000000000001;
  54:	    28000737          	lui	x14,0x28000
     ### int main(int argc, char const *argv[]) {
  58:	    f3010113          	addi	x2,x2,-208
     ###     map[1] = 0b101000000000000000000000000001;
  5c:	    00170713          	addi	x14,x14,1 # 28000001 <__global_pointer$+0x25fff801>
  60:	    04e12623          	sw	x14,76(x2)
     ###     map[2] = 0b010100001000000000000000000000;
  64:	    14200737          	lui	x14,0x14200
  68:	    04e12823          	sw	x14,80(x2)
     ###     map[3] = 0b001010000000000000000000000010;
  6c:	    0a000737          	lui	x14,0xa000
  70:	    00270713          	addi	x14,x14,2 # a000002 <__global_pointer$+0x7fff802>
  74:	    04e12a23          	sw	x14,84(x2)
     ###     map[4] = 0b000101100000000000000000000000;
  78:	    05800737          	lui	x14,0x5800
  7c:	    04e12c23          	sw	x14,88(x2)
     ###     map[5] = 0b000010000000000000000000000000;
  80:	    02000737          	lui	x14,0x2000
  84:	    04e12e23          	sw	x14,92(x2)
     ###     map[6] = 0b000010010000000000000000000000;
  88:	    02400737          	lui	x14,0x2400
  8c:	    06e12023          	sw	x14,96(x2)
     ###     map[7] = 0b000000101000000000000000000000;
  90:	    00a00737          	lui	x14,0xa00
  94:	    06e12223          	sw	x14,100(x2)
     ###     map[8] = 0b001000010000100000000000000000;
  98:	    08420737          	lui	x14,0x8420
  9c:	    06e12423          	sw	x14,104(x2)
     ###     map[9] = 0b000000001011000000000000000000;
  a0:	    002c0737          	lui	x14,0x2c0
  a4:	    06e12623          	sw	x14,108(x2)
     ###     map[10] = 0b000000000100000000000000000000;
  a8:	    00100737          	lui	x14,0x100
  ac:	    06e12823          	sw	x14,112(x2)
     ###     map[11] = 0b000000000100000000000000000000;
  b0:	    06e12a23          	sw	x14,116(x2)
     ###     map[12] = 0b000000001000010000010000000000;
  b4:	    00210737          	lui	x14,0x210
  b8:	    40070713          	addi	x14,x14,1024 # 210400 <__flash_size+0x20fc00>
  bc:	    06e12c23          	sw	x14,120(x2)
     ###     map[13] = 0b000000000000101000000000000000;
  c0:	    00028737          	lui	x14,0x28
  c4:	    06e12e23          	sw	x14,124(x2)
     ###     map[14] = 0b000000000000000110000000000000;
  c8:	    00006737          	lui	x14,0x6
  cc:	    08e12023          	sw	x14,128(x2)
     ###     map[15] = 0b000000000000001000000000000000;
  d0:	    00008737          	lui	x14,0x8
  d4:	    08e12223          	sw	x14,132(x2)
     ###     map[16] = 0b000000000000001001100000000000;
  d8:	    0000a737          	lui	x14,0xa
  dc:	    80070713          	addi	x14,x14,-2048 # 9800 <__flash_size+0x9000>
  e0:	    08e12423          	sw	x14,136(x2)
     ###     map[17] = 0b000000000000000010000000000000;
  e4:	    00002737          	lui	x14,0x2
  e8:	    08e12623          	sw	x14,140(x2)
     ###     map[18] = 0b000000000000000010010000000000;
  ec:	    40070713          	addi	x14,x14,1024 # 2400 <__flash_size+0x1c00>
  f0:	    08e12823          	sw	x14,144(x2)
     ###     map[19] = 0b000000000000100000101000000000;
  f4:	    00021737          	lui	x14,0x21
  f8:	    a0070713          	addi	x14,x14,-1536 # 20a00 <__flash_size+0x20200>
  fc:	    08e12a23          	sw	x14,148(x2)
     ###     map[20] = 0b000000000000000000010100100001;
 100:	    52100713          	addi	x14,x0,1313
 104:	    08e12c23          	sw	x14,152(x2)
     ###     map[21] = 0b000000000000000000001011000000;
 108:	    2c000713          	addi	x14,x0,704
 10c:	    08e12e23          	sw	x14,156(x2)
     ###     map[22] = 0b000000000000000000000100000000;
 110:	    10000713          	addi	x14,x0,256
 114:	    0ae12023          	sw	x14,160(x2)
     ###     map[23] = 0b000000000000000000000100000000;
 118:	    0ae12223          	sw	x14,164(x2)
     ###     map[24] = 0b000000000000000000001000010000;
 11c:	    21000713          	addi	x14,x0,528
 120:	    0ae12423          	sw	x14,168(x2)
     ###     map[25] = 0b000000000000000000000000101000;
 124:	    02800713          	addi	x14,x0,40
 128:	    0ae12623          	sw	x14,172(x2)
     ###     map[26] = 0b000000000000000000000000010110;
 12c:	    01600713          	addi	x14,x0,22
 130:	    0ae12823          	sw	x14,176(x2)
     ###     map[27] = 0b000000000000000000000000001000;
 134:	    00800713          	addi	x14,x0,8
 138:	    0ae12a23          	sw	x14,180(x2)
     ###     map[28] = 0b000100000000000000000000001001;
 13c:	    04000737          	lui	x14,0x4000
     ###     map[0] = 0b010000000000000000000000000000;
 140:	    100007b7          	lui	x15,0x10000
     ###     map[28] = 0b000100000000000000000000001001;
 144:	    00970713          	addi	x14,x14,9 # 4000009 <__global_pointer$+0x1fff809>
     ### int main(int argc, char const *argv[]) {
 148:	    0c812423          	sw	x8,200(x2)
 14c:	    0c912223          	sw	x9,196(x2)
     ###     map[0] = 0b010000000000000000000000000000;
 150:	    04f12423          	sw	x15,72(x2)
     ### int main(int argc, char const *argv[]) {
 154:	    0c112623          	sw	x1,204(x2)
     ###     map[28] = 0b000100000000000000000000001001;
 158:	    0ae12c23          	sw	x14,184(x2)
     ###     map[29] = 0b010000000000000000001000000010;
 15c:	    20278793          	addi	x15,x15,514 # 10000202 <__global_pointer$+0xdfffa02>
 160:	    0af12e23          	sw	x15,188(x2)
     ### 
     ###     uint32_t visited = 0b0;
     ###     uint32_t dist[8], prev[8];
     ### 
     ###     for (int i = 0; i < 30; ++i) {
 164:	    00000413          	addi	x8,x0,0
 168:	    01e00493          	addi	x9,x0,30
     ###         array_write(dist, i, 0xff);
 16c:	/-> 0ff47593          	andi	x11,x8,255
 170:	|   0ff00613          	addi	x12,x0,255
 174:	|   02810513          	addi	x10,x2,40
     ###     for (int i = 0; i < 30; ++i) {
 178:	|   00140413          	addi	x8,x8,1
     ###         array_write(dist, i, 0xff);
 17c:	|   078000ef          	jal	x1,1f4 <array_write>
     ###     for (int i = 0; i < 30; ++i) {
 180:	\-- fe9416e3          	bne	x8,x9,16c <path_planner.c.2e7442b2+0x27>
     ###     }
     ### 
     ###     array_write(dist, START_POINT, 0);
 184:	    02000437          	lui	x8,0x2000
 188:	    00044583          	lbu	x11,0(x8) # 2000000 <__bss_end>
 18c:	    02810513          	addi	x10,x2,40
 190:	    00000613          	addi	x12,x0,0
 194:	    0ff5f593          	andi	x11,x11,255
 198:	    05c000ef          	jal	x1,1f4 <array_write>
     ###     array_write(prev, START_POINT, 0xff);
 19c:	    00044583          	lbu	x11,0(x8)
 1a0:	    00810513          	addi	x10,x2,8
 1a4:	    0ff00613          	addi	x12,x0,255
 1a8:	    0ff5f593          	andi	x11,x11,255
 1ac:	    048000ef          	jal	x1,1f4 <array_write>
     ###     NODE_POINT = bit_position(map[START_POINT], 6);
 1b0:	    00044783          	lbu	x15,0(x8)
 1b4:	    0c010713          	addi	x14,x2,192
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 1b8:	    00000513          	addi	x10,x0,0
     ###     NODE_POINT = bit_position(map[START_POINT], 6);
 1bc:	    0ff7f793          	andi	x15,x15,255
 1c0:	    00279793          	slli	x15,x15,0x2
 1c4:	    00f707b3          	add	x15,x14,x15
     ###     return ((n >> (29-i)) & 1);
 1c8:	    f887a783          	lw	x15,-120(x15)
 1cc:	    0177d793          	srli	x15,x15,0x17
     ###     NODE_POINT = bit_position(map[START_POINT], 6);
 1d0:	    0017f793          	andi	x15,x15,1
 1d4:	    00f40423          	sb	x15,8(x8)
     ###     CPU_DONE = 1;
 1d8:	    00100793          	addi	x15,x0,1
 1dc:	    00f40623          	sb	x15,12(x8)
     ### }
 1e0:	    0cc12083          	lw	x1,204(x2)
 1e4:	    0c812403          	lw	x8,200(x2)
 1e8:	    0c412483          	lw	x9,196(x2)
 1ec:	    0d010113          	addi	x2,x2,208
 1f0:	    00008067          	jalr	x0,0(x1)

000001f4 <array_write>:
     ###     arr[(n & 0xfc)>>2] &= ~(0XFF000000>>((n&0x3)*8));
 1f4:	0fc5f793          	andi	x15,x11,252
 1f8:	0035f593          	andi	x11,x11,3
 1fc:	00f50533          	add	x10,x10,x15
 200:	00359713          	slli	x14,x11,0x3
 204:	ff0007b7          	lui	x15,0xff000
 208:	00e7d7b3          	srl	x15,x15,x14
 20c:	00052703          	lw	x14,0(x10)
     ###     arr[(n & 0xfc)>>2] |= val << (~(n&0x3)*8);
 210:	fff5c593          	xori	x11,x11,-1
     ###     arr[(n & 0xfc)>>2] &= ~(0XFF000000>>((n&0x3)*8));
 214:	fff7c793          	xori	x15,x15,-1
     ###     arr[(n & 0xfc)>>2] |= val << (~(n&0x3)*8);
 218:	00359593          	slli	x11,x11,0x3
     ###     arr[(n & 0xfc)>>2] &= ~(0XFF000000>>((n&0x3)*8));
 21c:	00e7f7b3          	and	x15,x15,x14
     ###     arr[(n & 0xfc)>>2] |= val << (~(n&0x3)*8);
 220:	00b615b3          	sll	x11,x12,x11
 224:	00b7e7b3          	or	x15,x15,x11
 228:	00f52023          	sw	x15,0(x10)
     ### }
 22c:	00008067          	jalr	x0,0(x1)

00000230 <_set_tls>:
 230:	00050213          	addi	x4,x10,0
 234:	00008067          	jalr	x0,0(x1)

00000238 <memcpy>:
 238:	       00050313          	addi	x6,x10,0
 23c:	/----- 00060e63          	beq	x12,x0,258 <memcpy+0x20>
 240:	|  /-> 00058383          	lb	x7,0(x11)
 244:	|  |   00730023          	sb	x7,0(x6)
 248:	|  |   fff60613          	addi	x12,x12,-1
 24c:	|  |   00130313          	addi	x6,x6,1
 250:	|  |   00158593          	addi	x11,x11,1
 254:	|  \-- fe0616e3          	bne	x12,x0,240 <memcpy+0x8>
 258:	\----> 00008067          	jalr	x0,0(x1)

0000025c <memset>:
 25c:	       00050313          	addi	x6,x10,0
 260:	/----- 00060a63          	beq	x12,x0,274 <memset+0x18>
 264:	|  /-> 00b30023          	sb	x11,0(x6)
 268:	|  |   fff60613          	addi	x12,x12,-1
 26c:	|  |   00130313          	addi	x6,x6,1
 270:	|  \-- fe061ae3          	bne	x12,x0,264 <memset+0x8>
 274:	\----> 00008067          	jalr	x0,0(x1)
