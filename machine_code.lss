
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
00000348 l     F .text	00000034 array_index
0000037c l     F .text	0000003c array_write
000003b8 l     F .text	0000007c findPath.part.0
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000412 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
0000043c g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000434 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
0000047c g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000460 g     F .text	0000001c memset
00000054 g     F .text	000002f4 main
00000100 g       *ABS*	00000000 __ram_size
00000412  w      .debug_info	00000000 .hidden path_planner.c.72224b18
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000480 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    48000593          	addi	x11,x0,1152
  1c:	    00000613          	addi	x12,x0,0
  20:	    41c000ef          	jal	x1,43c <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    42c000ef          	jal	x1,460 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    3f4000ef          	jal	x1,434 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     // ############# Add your code here #############
     ### 
     ###     uint32_t map[30];
     ### 
     ###     map[0] = 0b010000000000000000000000000000;
     ###     map[1] = 0b101000000000000000000000000001;
  54:	             28000737          	lui	x14,0x28000
     ### int main(int argc, char const *argv[]) {
  58:	             ee010113          	addi	x2,x2,-288
     ###     map[1] = 0b101000000000000000000000000001;
  5c:	             00170713          	addi	x14,x14,1 # 28000001 <__global_pointer$+0x25fff801>
  60:	             06e12e23          	sw	x14,124(x2)
     ###     map[2] = 0b010100001000000000000000000000;
  64:	             14200737          	lui	x14,0x14200
  68:	             08e12023          	sw	x14,128(x2)
     ###     map[3] = 0b001010000000000000000000000010;
  6c:	             0a000737          	lui	x14,0xa000
  70:	             00270713          	addi	x14,x14,2 # a000002 <__global_pointer$+0x7fff802>
  74:	             08e12223          	sw	x14,132(x2)
     ###     map[4] = 0b000101100000000000000000000000;
  78:	             05800737          	lui	x14,0x5800
  7c:	             08e12423          	sw	x14,136(x2)
     ###     map[5] = 0b000010000000000000000000000000;
  80:	             02000737          	lui	x14,0x2000
  84:	             08e12623          	sw	x14,140(x2)
     ###     map[6] = 0b000010010000000000000000000000;
  88:	             02400737          	lui	x14,0x2400
  8c:	             08e12823          	sw	x14,144(x2)
     ###     map[7] = 0b000000101000000000000000000000;
  90:	             00a00737          	lui	x14,0xa00
  94:	             08e12a23          	sw	x14,148(x2)
     ###     map[8] = 0b001000010000100000000000000000;
  98:	             08420737          	lui	x14,0x8420
  9c:	             08e12c23          	sw	x14,152(x2)
     ###     map[9] = 0b000000001011000000000000000000;
  a0:	             002c0737          	lui	x14,0x2c0
  a4:	             08e12e23          	sw	x14,156(x2)
     ###     map[10] = 0b000000000100000000000000000000;
  a8:	             00100737          	lui	x14,0x100
  ac:	             0ae12023          	sw	x14,160(x2)
     ###     map[11] = 0b000000000100000000000000000000;
  b0:	             0ae12223          	sw	x14,164(x2)
     ###     map[12] = 0b000000001000010000010000000000;
  b4:	             00210737          	lui	x14,0x210
  b8:	             40070713          	addi	x14,x14,1024 # 210400 <__flash_size+0x20fc00>
  bc:	             0ae12423          	sw	x14,168(x2)
     ###     map[13] = 0b000000000000101000000000000000;
  c0:	             00028737          	lui	x14,0x28
  c4:	             0ae12623          	sw	x14,172(x2)
     ###     map[14] = 0b000000000000000110000000000000;
  c8:	             00006737          	lui	x14,0x6
  cc:	             0ae12823          	sw	x14,176(x2)
     ###     map[15] = 0b000000000000001000000000000000;
  d0:	             00008737          	lui	x14,0x8
  d4:	             0ae12a23          	sw	x14,180(x2)
     ###     map[16] = 0b000000000000001001100000000000;
  d8:	             0000a737          	lui	x14,0xa
  dc:	             80070713          	addi	x14,x14,-2048 # 9800 <__flash_size+0x9000>
  e0:	             0ae12c23          	sw	x14,184(x2)
     ###     map[17] = 0b000000000000000010000000000000;
  e4:	             00002737          	lui	x14,0x2
  e8:	             0ae12e23          	sw	x14,188(x2)
     ###     map[18] = 0b000000000000000010010000000000;
  ec:	             40070713          	addi	x14,x14,1024 # 2400 <__flash_size+0x1c00>
     ###     map[0] = 0b010000000000000000000000000000;
  f0:	             100007b7          	lui	x15,0x10000
     ###     map[18] = 0b000000000000000010010000000000;
  f4:	             0ce12023          	sw	x14,192(x2)
     ###     map[19] = 0b000000000000100000101000000000;
  f8:	             00021737          	lui	x14,0x21
     ### int main(int argc, char const *argv[]) {
  fc:	             10812c23          	sw	x8,280(x2)
 100:	             10912a23          	sw	x9,276(x2)
     ###     map[0] = 0b010000000000000000000000000000;
 104:	             06f12c23          	sw	x15,120(x2)
     ###     map[19] = 0b000000000000100000101000000000;
 108:	             a0070713          	addi	x14,x14,-1536 # 20a00 <__flash_size+0x20200>
     ### int main(int argc, char const *argv[]) {
 10c:	             10112e23          	sw	x1,284(x2)
 110:	             11212823          	sw	x18,272(x2)
 114:	             11312623          	sw	x19,268(x2)
 118:	             11412423          	sw	x20,264(x2)
 11c:	             11512223          	sw	x21,260(x2)
 120:	             11612023          	sw	x22,256(x2)
 124:	             0f712e23          	sw	x23,252(x2)
 128:	             0f812c23          	sw	x24,248(x2)
 12c:	             0f912a23          	sw	x25,244(x2)
 130:	             0fa12823          	sw	x26,240(x2)
     ###     uint8_t idx = 0;
 134:	             00010ba3          	sb	x0,23(x2)
     ###     map[19] = 0b000000000000100000101000000000;
 138:	             0ce12223          	sw	x14,196(x2)
     ###     map[20] = 0b000000000000000000010100100001;
 13c:	             52100713          	addi	x14,x0,1313
 140:	             0ce12423          	sw	x14,200(x2)
     ###     map[21] = 0b000000000000000000001011000000;
 144:	             2c000713          	addi	x14,x0,704
 148:	             0ce12623          	sw	x14,204(x2)
     ###     map[22] = 0b000000000000000000000100000000;
 14c:	             10000713          	addi	x14,x0,256
 150:	             0ce12823          	sw	x14,208(x2)
     ###     map[23] = 0b000000000000000000000100000000;
 154:	             0ce12a23          	sw	x14,212(x2)
     ###     map[24] = 0b000000000000000000001000010000;
 158:	             21000713          	addi	x14,x0,528
 15c:	             0ce12c23          	sw	x14,216(x2)
     ###     map[25] = 0b000000000000000000000000101000;
 160:	             02800713          	addi	x14,x0,40
 164:	             0ce12e23          	sw	x14,220(x2)
     ###     map[26] = 0b000000000000000000000000010110;
 168:	             01600713          	addi	x14,x0,22
 16c:	             0ee12023          	sw	x14,224(x2)
     ###     map[27] = 0b000000000000000000000000001000;
 170:	             00800713          	addi	x14,x0,8
 174:	             0ee12223          	sw	x14,228(x2)
     ###     map[28] = 0b000100000000000000000000001001;
 178:	             04000737          	lui	x14,0x4000
 17c:	             00970713          	addi	x14,x14,9 # 4000009 <__global_pointer$+0x1fff809>
     ###     map[29] = 0b010000000000000000001000000010;
 180:	             20278793          	addi	x15,x15,514 # 10000202 <__global_pointer$+0xdfffa02>
     ###     map[28] = 0b000100000000000000000000001001;
 184:	             0ee12423          	sw	x14,232(x2)
     ###     map[29] = 0b010000000000000000001000000010;
 188:	             0ef12623          	sw	x15,236(x2)
     ### 
     ###     uint32_t visited = 0x00000000;
     ###     uint32_t dist[8], prev[8];
     ### 
     ###     for (int i = 0; i < 30; ++i) {
 18c:	             00000413          	addi	x8,x0,0
 190:	             01e00493          	addi	x9,x0,30
     ###         array_write(dist, i, INF);
 194:	         /-> 0ff47593          	andi	x11,x8,255
 198:	         |   0ff00613          	addi	x12,x0,255
 19c:	         |   03810513          	addi	x10,x2,56
     ###     for (int i = 0; i < 30; ++i) {
 1a0:	         |   00140413          	addi	x8,x8,1
     ###         array_write(dist, i, INF);
 1a4:	         |   1d8000ef          	jal	x1,37c <array_write>
     ###     for (int i = 0; i < 30; ++i) {
 1a8:	         \-- fe9416e3          	bne	x8,x9,194 <__ram_size+0x94>
     ###     }
     ### 
     ###     array_write(dist, START_POINT, 0);
 1ac:	             02000437          	lui	x8,0x2000
 1b0:	             00044583          	lbu	x11,0(x8) # 2000000 <__bss_end>
 1b4:	             00000613          	addi	x12,x0,0
 1b8:	             03810513          	addi	x10,x2,56
 1bc:	             0ff5f593          	andi	x11,x11,255
 1c0:	             1bc000ef          	jal	x1,37c <array_write>
     ###     array_write(prev, START_POINT, 0xff);
 1c4:	             00044583          	lbu	x11,0(x8)
 1c8:	             0ff00613          	addi	x12,x0,255
 1cc:	             01810513          	addi	x10,x2,24
 1d0:	             0ff5f593          	andi	x11,x11,255
 1d4:	             1a8000ef          	jal	x1,37c <array_write>
 1d8:	             01d00493          	addi	x9,x0,29
     ###     uint32_t visited = 0x00000000;
 1dc:	             00000413          	addi	x8,x0,0
     ### 	int min = INF, min_index;
 1e0:	             0ff00c13          	addi	x24,x0,255
     ###     return ((n >> (29-i)) & 1);
 1e4:	             01d00a93          	addi	x21,x0,29
     ### 	for (int v = 0; v < V; v++)
 1e8:	             01e00b13          	addi	x22,x0,30
     ### 
     ###     for (int i = 0; i < V - 1; i++) {
     ### 		uint8_t u = minDistance(dist, visited);
     ### 
     ###         //break if the destination is reached
     ###         if (u == END_POINT)
 1ec:	             02000bb7          	lui	x23,0x2000
     ###     *n |= 0x20000000 >> i;
 1f0:	             20000cb7          	lui	x25,0x20000
     ### 	int min = INF, min_index;
 1f4:	/----------> 0ff00a13          	addi	x20,x0,255
     ### 	for (int v = 0; v < V; v++)
 1f8:	|            00000993          	addi	x19,x0,0
     ###     return ((n >> (29-i)) & 1);
 1fc:	|     /----> 413a87b3          	sub	x15,x21,x19
 200:	|     |      00f457b3          	srl	x15,x8,x15
 204:	|     |      0017f793          	andi	x15,x15,1
     ### 		if (bit_position(sptSet,v) == false && array_index (dist,v) <= min)
 208:	|     |  /-- 00079e63          	bne	x15,x0,224 <__ram_size+0x124>
 20c:	|     |  |   0ff9f593          	andi	x11,x19,255
 210:	|     |  |   03810513          	addi	x10,x2,56
 214:	|     |  |   134000ef          	jal	x1,348 <array_index>
 218:	|     |  +-- 00aa4663          	blt	x20,x10,224 <__ram_size+0x124>
 21c:	|     |  |   00098913          	addi	x18,x19,0
 220:	|     |  |   00050a13          	addi	x20,x10,0
     ### 	for (int v = 0; v < V; v++)
 224:	|     |  \-> 00198993          	addi	x19,x19,1
 228:	|     \----- fd699ae3          	bne	x19,x22,1fc <__ram_size+0xfc>
     ###         if (u == END_POINT)
 22c:	|            004bc783          	lbu	x15,4(x23) # 2000004 <__bss_end+0x4>
     ### 	return min_index;
 230:	|            0ff97993          	andi	x19,x18,255
     ###         if (u == END_POINT)
 234:	|            0ff7f793          	andi	x15,x15,255
 238:	|  /-------- 09378e63          	beq	x15,x19,2d4 <__ram_size+0x1d4>
     ###     *n |= 0x20000000 >> i;
 23c:	|  |         412cd7b3          	sra	x15,x25,x18
 240:	|  |         00f46433          	or	x8,x8,x15
     ###         //mark the vertex as visited
     ### 		bit_load(&visited,u);
     ### 
     ###         // updating the distance of the adjacent unvisited vertices
     ### 		for (int v = 0; v < V; v++)
     ### 			if (!bit_position (visited,v) && bit_position (map[u],v)   // if the vertex is not visited (value of current v has never been the value of u) 
 244:	|  |         00291a13          	slli	x20,x18,0x2
 248:	|  |         0f010793          	addi	x15,x2,240
     ### 		for (int v = 0; v < V; v++)
 24c:	|  |         00000d13          	addi	x26,x0,0
     ### 			if (!bit_position (visited,v) && bit_position (map[u],v)   // if the vertex is not visited (value of current v has never been the value of u) 
 250:	|  |         01478a33          	add	x20,x15,x20
     ###     return ((n >> (29-i)) & 1);
 254:	|  |  /----> 41aa86b3          	sub	x13,x21,x26
 258:	|  |  |      00d45733          	srl	x14,x8,x13
 25c:	|  |  |      00177713          	andi	x14,x14,1
     ### 			if (!bit_position (visited,v) && bit_position (map[u],v)   // if the vertex is not visited (value of current v has never been the value of u) 
 260:	|  |  |  /-- 06071263          	bne	x14,x0,2c4 <__ram_size+0x1c4>
     ###     return ((n >> (29-i)) & 1);
 264:	|  |  |  |   f88a2783          	lw	x15,-120(x20)
 268:	|  |  |  |   00d7d7b3          	srl	x15,x15,x13
 26c:	|  |  |  |   0017f793          	andi	x15,x15,1
     ### 			if (!bit_position (visited,v) && bit_position (map[u],v)   // if the vertex is not visited (value of current v has never been the value of u) 
 270:	|  |  |  +-- 04078a63          	beq	x15,x0,2c4 <__ram_size+0x1c4>
     ###                                             //and there is an edge between u and v
     ### 				&& array_index(dist,u) != INF  // if the distance of u is not infinity
 274:	|  |  |  |   00098593          	addi	x11,x19,0
 278:	|  |  |  |   03810513          	addi	x10,x2,56
 27c:	|  |  |  |   0cc000ef          	jal	x1,348 <array_index>
 280:	|  |  |  +-- 05850263          	beq	x10,x24,2c4 <__ram_size+0x1c4>
     ###     return ((n >> (29-i)) & 1);
 284:	|  |  |  |   00150613          	addi	x12,x10,1
 288:	|  |  |  |   0ff67613          	andi	x12,x12,255
 28c:	|  |  |  |   0ffd7593          	andi	x11,x26,255
     ### 				&& array_index(dist,u) + bit_position (map[u],v) < array_index(dist,v)) // sum of distance to u and edge weight of v-u is 
 290:	|  |  |  |   03810513          	addi	x10,x2,56
 294:	|  |  |  |   00c12623          	sw	x12,12(x2)
 298:	|  |  |  |   00b12423          	sw	x11,8(x2)
 29c:	|  |  |  |   0ac000ef          	jal	x1,348 <array_index>
 2a0:	|  |  |  |   00c12603          	lw	x12,12(x2)
 2a4:	|  |  |  |   00812583          	lw	x11,8(x2)
 2a8:	|  |  |  +-- 00a67e63          	bgeu	x12,x10,2c4 <__ram_size+0x1c4>
     ###                                                     //less than the distance to v (v is not visited)
     ###                 {
     ###                     array_write(dist,v,array_index(dist,u) + bit_position (map[u],v)); //update the distance of v     
 2ac:	|  |  |  |   03810513          	addi	x10,x2,56
 2b0:	|  |  |  |   0cc000ef          	jal	x1,37c <array_write>
     ###                     // printf("dist: %d\n", array_index(dist,v));
     ###                     array_write(prev,v, u); //update the parent of v
 2b4:	|  |  |  |   00812583          	lw	x11,8(x2)
 2b8:	|  |  |  |   00098613          	addi	x12,x19,0
 2bc:	|  |  |  |   01810513          	addi	x10,x2,24
 2c0:	|  |  |  |   0bc000ef          	jal	x1,37c <array_write>
     ### 		for (int v = 0; v < V; v++)
 2c4:	|  |  |  \-> 001d0d13          	addi	x26,x26,1
 2c8:	|  |  \----- f96d16e3          	bne	x26,x22,254 <__ram_size+0x154>
     ###     for (int i = 0; i < V - 1; i++) {
 2cc:	|  |         fff48493          	addi	x9,x9,-1
 2d0:	\--|-------- f20492e3          	bne	x9,x0,1f4 <__ram_size+0xf4>
     ###                 }
     ### 	}
     ### 
     ###     findPath(END_POINT, prev, path_planned, &idx);
 2d4:	   \-------> 020007b7          	lui	x15,0x2000
 2d8:	             0047c503          	lbu	x10,4(x15) # 2000004 <__bss_end+0x4>
     ###     if (currentVertex == 0xff) {
 2dc:	             0ff00793          	addi	x15,x0,255
     ###     findPath(END_POINT, prev, path_planned, &idx);
 2e0:	             0ff57513          	andi	x10,x10,255
     ###     if (currentVertex == 0xff) {
 2e4:	         /-- 00f50a63          	beq	x10,x15,2f8 <__ram_size+0x1f8>
 2e8:	         |   01710693          	addi	x13,x2,23
 2ec:	         |   05810613          	addi	x12,x2,88
 2f0:	         |   01810593          	addi	x11,x2,24
 2f4:	         |   0c4000ef          	jal	x1,3b8 <findPath.part.0>
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < 1; ++i) {
     ###         NODE_POINT = path_planned[i];
 2f8:	         \-> 05814703          	lbu	x14,88(x2)
 2fc:	             020007b7          	lui	x15,0x2000
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 300:	             00000513          	addi	x10,x0,0
     ###         NODE_POINT = path_planned[i];
 304:	             00e78423          	sb	x14,8(x15) # 2000008 <__bss_end+0x8>
     ###     CPU_DONE = 1;
 308:	             00100713          	addi	x14,x0,1
 30c:	             00e78623          	sb	x14,12(x15)
     ### }
 310:	             11c12083          	lw	x1,284(x2)
 314:	             11812403          	lw	x8,280(x2)
 318:	             11412483          	lw	x9,276(x2)
 31c:	             11012903          	lw	x18,272(x2)
 320:	             10c12983          	lw	x19,268(x2)
 324:	             10812a03          	lw	x20,264(x2)
 328:	             10412a83          	lw	x21,260(x2)
 32c:	             10012b03          	lw	x22,256(x2)
 330:	             0fc12b83          	lw	x23,252(x2)
 334:	             0f812c03          	lw	x24,248(x2)
 338:	             0f412c83          	lw	x25,244(x2)
 33c:	             0f012d03          	lw	x26,240(x2)
 340:	             12010113          	addi	x2,x2,288
 344:	             00008067          	jalr	x0,0(x1)

00000348 <array_index>:
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 348:	0035f793          	andi	x15,x11,3
 34c:	0fc5f593          	andi	x11,x11,252
 350:	00b505b3          	add	x11,x10,x11
 354:	00379713          	slli	x14,x15,0x3
 358:	ff000537          	lui	x10,0xff000
 35c:	00e55533          	srl	x10,x10,x14
 360:	0005a703          	lw	x14,0(x11)
 364:	fff7c793          	xori	x15,x15,-1
 368:	00379793          	slli	x15,x15,0x3
 36c:	00e57533          	and	x10,x10,x14
 370:	00f55533          	srl	x10,x10,x15
     ### } 
 374:	0ff57513          	andi	x10,x10,255
 378:	00008067          	jalr	x0,0(x1)

0000037c <array_write>:
     ###     arr[(n & 0xfc)>>2] &= ~(0XFF000000>>((n&0x3)*8));
 37c:	0fc5f793          	andi	x15,x11,252
 380:	0035f593          	andi	x11,x11,3
 384:	00f50533          	add	x10,x10,x15
 388:	00359713          	slli	x14,x11,0x3
 38c:	ff0007b7          	lui	x15,0xff000
 390:	00e7d7b3          	srl	x15,x15,x14
 394:	00052703          	lw	x14,0(x10)
     ###     arr[(n & 0xfc)>>2] |= val << (~(n&0x3)*8);
 398:	fff5c593          	xori	x11,x11,-1
     ###     arr[(n & 0xfc)>>2] &= ~(0XFF000000>>((n&0x3)*8));
 39c:	fff7c793          	xori	x15,x15,-1
     ###     arr[(n & 0xfc)>>2] |= val << (~(n&0x3)*8);
 3a0:	00359593          	slli	x11,x11,0x3
     ###     arr[(n & 0xfc)>>2] &= ~(0XFF000000>>((n&0x3)*8));
 3a4:	00e7f7b3          	and	x15,x15,x14
     ###     arr[(n & 0xfc)>>2] |= val << (~(n&0x3)*8);
 3a8:	00b615b3          	sll	x11,x12,x11
 3ac:	00b7e7b3          	or	x15,x15,x11
 3b0:	00f52023          	sw	x15,0(x10)
     ### }
 3b4:	00008067          	jalr	x0,0(x1)

000003b8 <findPath.part.0>:
     ### void findPath(uint8_t currentVertex, uint32_t parents[], uint8_t path_planned[], uint8_t *idx)
 3b8:	/----> fe010113          	addi	x2,x2,-32
 3bc:	|      01312623          	sw	x19,12(x2)
 3c0:	|      00058993          	addi	x19,x11,0
 3c4:	|      01212823          	sw	x18,16(x2)
     ###     findPath(array_index(parents,currentVertex), parents, path_planned, idx);
 3c8:	|      00050593          	addi	x11,x10,0
     ### void findPath(uint8_t currentVertex, uint32_t parents[], uint8_t path_planned[], uint8_t *idx)
 3cc:	|      00050913          	addi	x18,x10,0
     ###     findPath(array_index(parents,currentVertex), parents, path_planned, idx);
 3d0:	|      00098513          	addi	x10,x19,0
     ### void findPath(uint8_t currentVertex, uint32_t parents[], uint8_t path_planned[], uint8_t *idx)
 3d4:	|      00812c23          	sw	x8,24(x2)
 3d8:	|      00912a23          	sw	x9,20(x2)
 3dc:	|      00112e23          	sw	x1,28(x2)
 3e0:	|      00060413          	addi	x8,x12,0
 3e4:	|      00068493          	addi	x9,x13,0
     ###     findPath(array_index(parents,currentVertex), parents, path_planned, idx);
 3e8:	|      f61ff0ef          	jal	x1,348 <array_index>
     ###     if (currentVertex == 0xff) {
 3ec:	|      0ff00793          	addi	x15,x0,255
 3f0:	|  /-- 00f50a63          	beq	x10,x15,404 <findPath.part.0+0x4c>
 3f4:	|  |   00048693          	addi	x13,x9,0
 3f8:	|  |   00040613          	addi	x12,x8,0
 3fc:	|  |   00098593          	addi	x11,x19,0
 400:	\--|-- fb9ff0ef          	jal	x1,3b8 <findPath.part.0>
     ###     path_planned[(*idx)++] = currentVertex;
 404:	   \-> 0004c603          	lbu	x12,0(x9)
 408:	       00160793          	addi	x15,x12,1
 40c:	       00f48023          	sb	x15,0(x9)
 410:	       00c40433          	add	x8,x8,x12
 414:	       01240023          	sb	x18,0(x8)
     ### }
 418:	       01c12083          	lw	x1,28(x2)
 41c:	       01812403          	lw	x8,24(x2)
 420:	       01412483          	lw	x9,20(x2)
 424:	       01012903          	lw	x18,16(x2)
 428:	       00c12983          	lw	x19,12(x2)
 42c:	       02010113          	addi	x2,x2,32
 430:	       00008067          	jalr	x0,0(x1)

00000434 <_set_tls>:
 434:	00050213          	addi	x4,x10,0
 438:	00008067          	jalr	x0,0(x1)

0000043c <memcpy>:
 43c:	       00050313          	addi	x6,x10,0
 440:	/----- 00060e63          	beq	x12,x0,45c <memcpy+0x20>
 444:	|  /-> 00058383          	lb	x7,0(x11)
 448:	|  |   00730023          	sb	x7,0(x6)
 44c:	|  |   fff60613          	addi	x12,x12,-1
 450:	|  |   00130313          	addi	x6,x6,1
 454:	|  |   00158593          	addi	x11,x11,1
 458:	|  \-- fe0616e3          	bne	x12,x0,444 <memcpy+0x8>
 45c:	\----> 00008067          	jalr	x0,0(x1)

00000460 <memset>:
 460:	       00050313          	addi	x6,x10,0
 464:	/----- 00060a63          	beq	x12,x0,478 <memset+0x18>
 468:	|  /-> 00b30023          	sb	x11,0(x6)
 46c:	|  |   fff60613          	addi	x12,x12,-1
 470:	|  |   00130313          	addi	x6,x6,1
 474:	|  \-- fe061ae3          	bne	x12,x0,468 <memset+0x8>
 478:	\----> 00008067          	jalr	x0,0(x1)

0000047c <__text_end>:
 47c:	0000                	c.unimp
	...
