
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
00000514 l     F .text	00000064 findPath.part.0
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
000002e6 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000580 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000578 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000005c0 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000005a4 g     F .text	0000001c memset
00000054 g     F .text	000004c0 main
00000100 g       *ABS*	00000000 __ram_size
000002e6  w      .debug_info	00000000 .hidden t1b_path_planner.c.2983de78
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000005c0 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    5c000593          	addi	x11,x0,1472
  1c:	    00000613          	addi	x12,x0,0
  20:	    560000ef          	jal	x1,580 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    570000ef          	jal	x1,5a4 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    538000ef          	jal	x1,578 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### //#############################################
     ### 
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	             81010113          	addi	x2,x2,-2032
  58:	             7e812423          	sw	x8,2024(x2)
  5c:	             7e912223          	sw	x9,2020(x2)
  60:	             7d312e23          	sw	x19,2012(x2)
  64:	             7e112623          	sw	x1,2028(x2)
  68:	             7f212023          	sw	x18,2016(x2)
  6c:	             7d412c23          	sw	x20,2008(x2)
  70:	             7d512a23          	sw	x21,2004(x2)
  74:	             7d612823          	sw	x22,2000(x2)
     ###     uint8_t idx = 0;
     ### 
     ###     // ############# Add your code here #############
     ###     //################### my code###################
     ###     //adjacency matrix of the graph
     ###     int map[30][30] = {
  78:	             00001637          	lui	x12,0x1
     ### int main(int argc, char const *argv[]) {
  7c:	             87010113          	addi	x2,x2,-1936
     ###     int map[30][30] = {
  80:	             e1060613          	addi	x12,x12,-496 # e10 <__flash_size+0x610>
  84:	             00000593          	addi	x11,x0,0
  88:	             15010513          	addi	x10,x2,336
     ###     uint8_t idx = 0;
  8c:	             00010fa3          	sb	x0,31(x2)
     ###     int map[30][30] = {
  90:	             514000ef          	jal	x1,5a4 <memset>
  94:	             00001737          	lui	x14,0x1
  98:	             01010613          	addi	x12,x2,16
  9c:	             80c70693          	addi	x13,x14,-2036 # 80c <__flash_size+0xc>
  a0:	             00100793          	addi	x15,x0,1
  a4:	             00c686b3          	add	x13,x13,x12
  a8:	             00f6a023          	sw	x15,0(x13)
  ac:	             81070693          	addi	x13,x14,-2032
  b0:	             14f12a23          	sw	x15,340(x2)
  b4:	             1cf12423          	sw	x15,456(x2)
  b8:	             1cf12823          	sw	x15,464(x2)
  bc:	             22f12e23          	sw	x15,572(x2)
  c0:	             24f12223          	sw	x15,580(x2)
  c4:	             24f12623          	sw	x15,588(x2)
  c8:	             26f12023          	sw	x15,608(x2)
  cc:	             2cf12023          	sw	x15,704(x2)
  d0:	             2cf12423          	sw	x15,712(x2)
  d4:	             32f12423          	sw	x15,808(x2)
  d8:	             32f12e23          	sw	x15,828(x2)
  dc:	             34f12223          	sw	x15,836(x2)
  e0:	             34f12423          	sw	x15,840(x2)
  e4:	             3af12c23          	sw	x15,952(x2)
  e8:	             42f12823          	sw	x15,1072(x2)
  ec:	             42f12e23          	sw	x15,1084(x2)
  f0:	             4af12823          	sw	x15,1200(x2)
  f4:	             4af12c23          	sw	x15,1208(x2)
  f8:	             50f12c23          	sw	x15,1304(x2)
  fc:	             52f12623          	sw	x15,1324(x2)
 100:	             54f12023          	sw	x15,1344(x2)
 104:	             5af12423          	sw	x15,1448(x2)
 108:	             5af12823          	sw	x15,1456(x2)
 10c:	             5af12a23          	sw	x15,1460(x2)
 110:	             62f12223          	sw	x15,1572(x2)
 114:	             68f12e23          	sw	x15,1692(x2)
 118:	             70f12823          	sw	x15,1808(x2)
 11c:	             72f12223          	sw	x15,1828(x2)
 120:	             72f12e23          	sw	x15,1852(x2)
 124:	             78f12c23          	sw	x15,1944(x2)
 128:	             7af12023          	sw	x15,1952(x2)
 12c:	             00c686b3          	add	x13,x13,x12
 130:	             00f6a023          	sw	x15,0(x13)
 134:	             88070693          	addi	x13,x14,-1920
 138:	             00c686b3          	add	x13,x13,x12
 13c:	             00f6a023          	sw	x15,0(x13)
 140:	             8f870693          	addi	x13,x14,-1800
 144:	             00c686b3          	add	x13,x13,x12
 148:	             00f6a023          	sw	x15,0(x13)
 14c:	             90470693          	addi	x13,x14,-1788
 150:	             00c686b3          	add	x13,x13,x12
 154:	             00f6a023          	sw	x15,0(x13)
 158:	             90870693          	addi	x13,x14,-1784
 15c:	             00c686b3          	add	x13,x13,x12
 160:	             00f6a023          	sw	x15,0(x13)
 164:	             97870693          	addi	x13,x14,-1672
 168:	             00c686b3          	add	x13,x13,x12
 16c:	             00f6a023          	sw	x15,0(x13)
 170:	             9f070693          	addi	x13,x14,-1552
 174:	             00c686b3          	add	x13,x13,x12
 178:	             00f6a023          	sw	x15,0(x13)
 17c:	             9fc70693          	addi	x13,x14,-1540
 180:	             00c686b3          	add	x13,x13,x12
 184:	             00f6a023          	sw	x15,0(x13)
 188:	             a5870693          	addi	x13,x14,-1448
 18c:	             00c686b3          	add	x13,x13,x12
 190:	             00f6a023          	sw	x15,0(x13)
 194:	             a7070693          	addi	x13,x14,-1424
 198:	             00c686b3          	add	x13,x13,x12
 19c:	             00f6a023          	sw	x15,0(x13)
 1a0:	             a7870693          	addi	x13,x14,-1416
 1a4:	             00c686b3          	add	x13,x13,x12
 1a8:	             00f6a023          	sw	x15,0(x13)
 1ac:	             aec70693          	addi	x13,x14,-1300
 1b0:	             00c686b3          	add	x13,x13,x12
 1b4:	             00f6a023          	sw	x15,0(x13)
 1b8:	             af470693          	addi	x13,x14,-1292
 1bc:	             00c686b3          	add	x13,x13,x12
 1c0:	             00f6a023          	sw	x15,0(x13)
 1c4:	             b0070693          	addi	x13,x14,-1280
 1c8:	             00c686b3          	add	x13,x13,x12
 1cc:	             00f6a023          	sw	x15,0(x13)
 1d0:	             b1470693          	addi	x13,x14,-1260
 1d4:	             00c686b3          	add	x13,x13,x12
 1d8:	             00f6a023          	sw	x15,0(x13)
 1dc:	             b6870693          	addi	x13,x14,-1176
 1e0:	             00c686b3          	add	x13,x13,x12
 1e4:	             00f6a023          	sw	x15,0(x13)
 1e8:	             b7070693          	addi	x13,x14,-1168
 1ec:	             00c686b3          	add	x13,x13,x12
 1f0:	             00f6a023          	sw	x15,0(x13)
 1f4:	             b7470693          	addi	x13,x14,-1164
 1f8:	             00c686b3          	add	x13,x13,x12
 1fc:	             00f6a023          	sw	x15,0(x13)
 200:	             be470693          	addi	x13,x14,-1052
 204:	             00c686b3          	add	x13,x13,x12
 208:	             00f6a023          	sw	x15,0(x13)
 20c:	             c5c70693          	addi	x13,x14,-932
 210:	             00c686b3          	add	x13,x13,x12
 214:	             00f6a023          	sw	x15,0(x13)
 218:	             cd070693          	addi	x13,x14,-816
 21c:	             00c686b3          	add	x13,x13,x12
 220:	             00f6a023          	sw	x15,0(x13)
 224:	             ce470693          	addi	x13,x14,-796
 228:	             00c686b3          	add	x13,x13,x12
 22c:	             00f6a023          	sw	x15,0(x13)
 230:	             d5870693          	addi	x13,x14,-680
 234:	             00c686b3          	add	x13,x13,x12
 238:	             00f6a023          	sw	x15,0(x13)
 23c:	             d6070693          	addi	x13,x14,-672
 240:	             00c686b3          	add	x13,x13,x12
 244:	             00f6a023          	sw	x15,0(x13)
 248:	             dd470693          	addi	x13,x14,-556
 24c:	             00c686b3          	add	x13,x13,x12
 250:	             00f6a023          	sw	x15,0(x13)
 254:	             ddc70693          	addi	x13,x14,-548
 258:	             00c686b3          	add	x13,x13,x12
 25c:	             00f6a023          	sw	x15,0(x13)
 260:	             de070693          	addi	x13,x14,-544
 264:	             00c686b3          	add	x13,x13,x12
 268:	             00f6a023          	sw	x15,0(x13)
 26c:	             e5070693          	addi	x13,x14,-432
 270:	             00c686b3          	add	x13,x13,x12
 274:	             00f6a023          	sw	x15,0(x13)
 278:	             e6c70693          	addi	x13,x14,-404
 27c:	             00c686b3          	add	x13,x13,x12
 280:	             00f6a023          	sw	x15,0(x13)
 284:	             ec870693          	addi	x13,x14,-312
 288:	             00c686b3          	add	x13,x13,x12
 28c:	             00f6a023          	sw	x15,0(x13)
 290:	             ed470693          	addi	x13,x14,-300
 294:	             00c686b3          	add	x13,x13,x12
 298:	             00f6a023          	sw	x15,0(x13)
 29c:	             edc70693          	addi	x13,x14,-292
 2a0:	             00c686b3          	add	x13,x13,x12
 2a4:	             00f6a023          	sw	x15,0(x13)
 2a8:	             f2870693          	addi	x13,x14,-216
 2ac:	             00c686b3          	add	x13,x13,x12
 2b0:	             00f6a023          	sw	x15,0(x13)
 2b4:	             f4870693          	addi	x13,x14,-184
 2b8:	             00c686b3          	add	x13,x13,x12
 2bc:	             00f6a023          	sw	x15,0(x13)
     ###         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
     ###         {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1},
     ###         {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0}
     ###     };
     ###     
     ###     dijkstra(map, START_POINT, END_POINT, path_planned,&idx);
 2c0:	             020007b7          	lui	x15,0x2000
 2c4:	             0007c483          	lbu	x9,0(x15) # 2000000 <__bss_end>
     ###     uint8_t idx = 0;
 2c8:	             fffff437          	lui	x8,0xfffff
     ###     dijkstra(map, START_POINT, END_POINT, path_planned,&idx);
 2cc:	             0047c983          	lbu	x19,4(x15)
 2d0:	             f5070793          	addi	x15,x14,-176
 2d4:	             00c787b3          	add	x15,x15,x12
 2d8:	             10040413          	addi	x8,x8,256 # fffff100 <__global_pointer$+0xfdffe900>
 2dc:	             00878433          	add	x8,x15,x8
     ### 		dist[i] = INT_MAX, sptSet[i] = false;
 2e0:	             80000737          	lui	x14,0x80000
     ###     dijkstra(map, START_POINT, END_POINT, path_planned,&idx);
 2e4:	             0ff4f493          	andi	x9,x9,255
 2e8:	             0ff9f993          	andi	x19,x19,255
 2ec:	             07840693          	addi	x13,x8,120
 2f0:	             00040793          	addi	x15,x8,0
     ### 		dist[i] = INT_MAX, sptSet[i] = false;
 2f4:	             fff74713          	xori	x14,x14,-1
 2f8:	         /-> 00e7a023          	sw	x14,0(x15)
     ### 	for (int i = 0; i < V; i++)
 2fc:	         |   00478793          	addi	x15,x15,4
 300:	         \-- fed79ce3          	bne	x15,x13,2f8 <t1b_path_planner.c.2983de78+0x12>
     ### 		dist[i] = INT_MAX, sptSet[i] = false;
 304:	             00001b37          	lui	x22,0x1
 308:	             fffff937          	lui	x18,0xfffff
 30c:	             01010713          	addi	x14,x2,16
 310:	             f50b0793          	addi	x15,x22,-176 # f50 <__flash_size+0x750>
 314:	             00e787b3          	add	x15,x15,x14
 318:	             0c090a93          	addi	x21,x18,192 # fffff0c0 <__global_pointer$+0xfdffe8c0>
 31c:	             01578333          	add	x6,x15,x21
 320:	             00000593          	addi	x11,x0,0
 324:	             00030513          	addi	x10,x6,0
 328:	             01e00613          	addi	x12,x0,30
 32c:	             278000ef          	jal	x1,5a4 <memset>
     ### 	dist[src] = 0;
 330:	             01010713          	addi	x14,x2,16
 334:	             f50b0793          	addi	x15,x22,-176
 338:	             00e787b3          	add	x15,x15,x14
 33c:	             01278733          	add	x14,x15,x18
 340:	             00249793          	slli	x15,x9,0x2
 344:	             00f707b3          	add	x15,x14,x15
     ###     parent[src] = -1;
 348:	             fff00693          	addi	x13,x0,-1
 34c:	             16d7ac23          	sw	x13,376(x15)
     ### 	dist[src] = 0;
 350:	             1007a023          	sw	x0,256(x15)
     ### 			if (!sptSet[v] && graph[u][v]   // if the vertex is not visited (value of current v has never been the value of u) 
 354:	             01010693          	addi	x13,x2,16
 358:	             f50b0793          	addi	x15,x22,-176
 35c:	             1f090893          	addi	x17,x18,496
 360:	             00d787b3          	add	x15,x15,x13
 364:	             011788b3          	add	x17,x15,x17
     ###                     parent[v] = u; //update the parent of v
 368:	             f50b0793          	addi	x15,x22,-176
     ### 	int min = INT_MAX, min_index;
 36c:	             800005b7          	lui	x11,0x80000
     ###                     parent[v] = u; //update the parent of v
 370:	             17890913          	addi	x18,x18,376
 374:	             00d787b3          	add	x15,x15,x13
     ### 		dist[i] = INT_MAX, sptSet[i] = false;
 378:	             00050313          	addi	x6,x10,0
     ### 	int min = INT_MAX, min_index;
 37c:	             fff5c593          	xori	x11,x11,-1
     ###     parent[src] = -1;
 380:	             01d00513          	addi	x10,x0,29
     ### 	for (int v = 0; v < V; v++)
 384:	             01e00f13          	addi	x30,x0,30
     ### 		sptSet[u] = true;
 388:	             00100f93          	addi	x31,x0,1
     ###                     parent[v] = u; //update the parent of v
 38c:	             01278933          	add	x18,x15,x18
     ### 		for (int v = 0; v < V; v++)
 390:	             07800293          	addi	x5,x0,120
     ###     dijkstra(map, START_POINT, END_POINT, path_planned,&idx);
 394:	/----------> 00040693          	addi	x13,x8,0
     ### 	int min = INT_MAX, min_index;
 398:	|            00058613          	addi	x12,x11,0 # 80000000 <__global_pointer$+0x7dfff800>
     ### 	for (int v = 0; v < V; v++)
 39c:	|            00000793          	addi	x15,x0,0
     ### 		if (sptSet[v] == false && dist[v] <= min)
 3a0:	|     /----> 00f30833          	add	x16,x6,x15
 3a4:	|     |      00084803          	lbu	x16,0(x16)
 3a8:	|     |  /-- 00081a63          	bne	x16,x0,3bc <t1b_path_planner.c.2983de78+0xd6>
 3ac:	|     |  |   0006a803          	lw	x16,0(x13)
 3b0:	|     |  +-- 01064663          	blt	x12,x16,3bc <t1b_path_planner.c.2983de78+0xd6>
 3b4:	|     |  |   00078a13          	addi	x20,x15,0
 3b8:	|     |  |   00080613          	addi	x12,x16,0
     ### 	for (int v = 0; v < V; v++)
 3bc:	|     |  \-> 00178793          	addi	x15,x15,1
 3c0:	|     |      00468693          	addi	x13,x13,4
 3c4:	|     \----- fde79ee3          	bne	x15,x30,3a0 <t1b_path_planner.c.2983de78+0xba>
     ###         if (u == dest)
 3c8:	|  /-------- 09498663          	beq	x19,x20,454 <t1b_path_planner.c.2983de78+0x16e>
     ### 		sptSet[u] = true;
 3cc:	|  |         014707b3          	add	x15,x14,x20
 3d0:	|  |         0df78023          	sb	x31,192(x15)
 3d4:	|  |         000017b7          	lui	x15,0x1
     ### 			if (!sptSet[v] && graph[u][v]   // if the vertex is not visited (value of current v has never been the value of u) 
 3d8:	|  |         004a1693          	slli	x13,x20,0x4
 3dc:	|  |         f5078793          	addi	x15,x15,-176 # f50 <__flash_size+0x750>
 3e0:	|  |         01010613          	addi	x12,x2,16
 3e4:	|  |         00c787b3          	add	x15,x15,x12
 3e8:	|  |         414686b3          	sub	x13,x13,x20
     ### 				&& dist[u] != INT_MAX  // if the distance of u is not infinity
 3ec:	|  |         002a1e93          	slli	x29,x20,0x2
 3f0:	|  |         01578e33          	add	x28,x15,x21
     ### 			if (!sptSet[v] && graph[u][v]   // if the vertex is not visited (value of current v has never been the value of u) 
 3f4:	|  |         00369693          	slli	x13,x13,0x3
 3f8:	|  |         00040813          	addi	x16,x8,0
 3fc:	|  |         00000793          	addi	x15,x0,0
     ### 				&& dist[u] != INT_MAX  // if the distance of u is not infinity
 400:	|  |         01d70eb3          	add	x29,x14,x29
     ### 			if (!sptSet[v] && graph[u][v]   // if the vertex is not visited (value of current v has never been the value of u) 
 404:	|  |  /----> 000e4603          	lbu	x12,0(x28)
 408:	|  |  |  /-- 02061a63          	bne	x12,x0,43c <t1b_path_planner.c.2983de78+0x156>
 40c:	|  |  |  |   00f68633          	add	x12,x13,x15
 410:	|  |  |  |   00c88633          	add	x12,x17,x12
 414:	|  |  |  |   00062603          	lw	x12,0(x12)
 418:	|  |  |  +-- 02060263          	beq	x12,x0,43c <t1b_path_planner.c.2983de78+0x156>
     ### 				&& dist[u] != INT_MAX  // if the distance of u is not infinity
 41c:	|  |  |  |   100ea383          	lw	x7,256(x29)
 420:	|  |  |  +-- 00b38e63          	beq	x7,x11,43c <t1b_path_planner.c.2983de78+0x156>
     ### 				&& dist[u] + graph[u][v] < dist[v]) // sum of distance to u and edge weight of v-u is 
 424:	|  |  |  |   00760633          	add	x12,x12,x7
 428:	|  |  |  |   00082383          	lw	x7,0(x16)
 42c:	|  |  |  +-- 00765863          	bge	x12,x7,43c <t1b_path_planner.c.2983de78+0x156>
     ###                     dist[v] = dist[u] + graph[u][v]; //update the distance of v     
 430:	|  |  |  |   00c82023          	sw	x12,0(x16)
     ###                     parent[v] = u; //update the parent of v
 434:	|  |  |  |   00f90633          	add	x12,x18,x15
 438:	|  |  |  |   01462023          	sw	x20,0(x12)
     ### 		for (int v = 0; v < V; v++)
 43c:	|  |  |  \-> 00478793          	addi	x15,x15,4
 440:	|  |  |      001e0e13          	addi	x28,x28,1
 444:	|  |  |      00480813          	addi	x16,x16,4
 448:	|  |  \----- fa579ee3          	bne	x15,x5,404 <t1b_path_planner.c.2983de78+0x11e>
     ### 	for (int count = 0; count < V - 1; count++) {
 44c:	|  |         fff50513          	addi	x10,x10,-1
 450:	\--|-------- f40512e3          	bne	x10,x0,394 <t1b_path_planner.c.2983de78+0xae>
     ###     if (currentVertex == -1) {
 454:	   \-------> 00001937          	lui	x18,0x1
 458:	             01010713          	addi	x14,x2,16
 45c:	             fffff4b7          	lui	x9,0xfffff
 460:	             f5090793          	addi	x15,x18,-176 # f50 <__flash_size+0x750>
 464:	             00e787b3          	add	x15,x15,x14
 468:	             0e048413          	addi	x8,x9,224 # fffff0e0 <__global_pointer$+0xfdffe8e0>
 46c:	             00878433          	add	x8,x15,x8
 470:	             f5090793          	addi	x15,x18,-176
 474:	             00e787b3          	add	x15,x15,x14
 478:	             0bf48693          	addi	x13,x9,191
 47c:	             00d786b3          	add	x13,x15,x13
 480:	             f5090793          	addi	x15,x18,-176
 484:	             00e787b3          	add	x15,x15,x14
 488:	             17848593          	addi	x11,x9,376
 48c:	             00b785b3          	add	x11,x15,x11
 490:	             00040613          	addi	x12,x8,0
 494:	             00098513          	addi	x10,x19,0
 498:	             07c000ef          	jal	x1,514 <findPath.part.0>
     ### 
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 49c:	             01010693          	addi	x13,x2,16
 4a0:	             f5090713          	addi	x14,x18,-176
 4a4:	             00d70733          	add	x14,x14,x13
 4a8:	             00970733          	add	x14,x14,x9
 4ac:	             00000793          	addi	x15,x0,0
 4b0:	             00e12623          	sw	x14,12(x2)
     ###         NODE_POINT = path_planned[i];
 4b4:	             020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 4b8:	      /----> 00c12703          	lw	x14,12(x2)
 4bc:	      |      0bf74703          	lbu	x14,191(x14) # 800000bf <__global_pointer$+0x7dfff8bf>
 4c0:	      |  /-- 04e7c063          	blt	x15,x14,500 <t1b_path_planner.c.2983de78+0x21a>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 4c4:	      |  |   020007b7          	lui	x15,0x2000
 4c8:	      |  |   00100713          	addi	x14,x0,1
 4cc:	      |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 4d0:	      |  |   79010113          	addi	x2,x2,1936
 4d4:	      |  |   7ec12083          	lw	x1,2028(x2)
 4d8:	      |  |   7e812403          	lw	x8,2024(x2)
 4dc:	      |  |   7e412483          	lw	x9,2020(x2)
 4e0:	      |  |   7e012903          	lw	x18,2016(x2)
 4e4:	      |  |   7dc12983          	lw	x19,2012(x2)
 4e8:	      |  |   7d812a03          	lw	x20,2008(x2)
 4ec:	      |  |   7d412a83          	lw	x21,2004(x2)
 4f0:	      |  |   7d012b03          	lw	x22,2000(x2)
 4f4:	      |  |   00000513          	addi	x10,x0,0
 4f8:	      |  |   7f010113          	addi	x2,x2,2032
 4fc:	      |  |   00008067          	jalr	x0,0(x1)
     ###         NODE_POINT = path_planned[i];
 500:	      |  \-> 00f40733          	add	x14,x8,x15
 504:	      |      00074703          	lbu	x14,0(x14)
     ###     for (int i = 0; i < idx; ++i) {
 508:	      |      00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 50c:	      |      00e68423          	sb	x14,8(x13) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i) {
 510:	      \----- fa9ff06f          	jal	x0,4b8 <t1b_path_planner.c.2983de78+0x1d2>

00000514 <findPath.part.0>:
     ###     findPath(parents[currentVertex], parents, path_planned, idx);
 514:	/----> 00251793          	slli	x15,x10,0x2
     ### void findPath(int currentVertex, int parents[], uint8_t path_planned[], uint8_t *idx)
 518:	|      ff010113          	addi	x2,x2,-16
     ###     findPath(parents[currentVertex], parents, path_planned, idx);
 51c:	|      00f587b3          	add	x15,x11,x15
     ### void findPath(int currentVertex, int parents[], uint8_t path_planned[], uint8_t *idx)
 520:	|      00912223          	sw	x9,4(x2)
 524:	|      00050493          	addi	x9,x10,0
     ###     findPath(parents[currentVertex], parents, path_planned, idx);
 528:	|      0007a503          	lw	x10,0(x15)
     ### void findPath(int currentVertex, int parents[], uint8_t path_planned[], uint8_t *idx)
 52c:	|      00812423          	sw	x8,8(x2)
 530:	|      01212023          	sw	x18,0(x2)
 534:	|      00112623          	sw	x1,12(x2)
     ###     if (currentVertex == -1) {
 538:	|      fff00793          	addi	x15,x0,-1
     ### void findPath(int currentVertex, int parents[], uint8_t path_planned[], uint8_t *idx)
 53c:	|      00060413          	addi	x8,x12,0
 540:	|      00068913          	addi	x18,x13,0
     ###     if (currentVertex == -1) {
 544:	|  /-- 00f50463          	beq	x10,x15,54c <findPath.part.0+0x38>
 548:	\--|-- fcdff0ef          	jal	x1,514 <findPath.part.0>
     ###     path_planned[(*idx)++] = currentVertex;
 54c:	   \-> 00094603          	lbu	x12,0(x18)
 550:	       00160793          	addi	x15,x12,1
 554:	       00f90023          	sb	x15,0(x18)
 558:	       00c40433          	add	x8,x8,x12
 55c:	       00940023          	sb	x9,0(x8)
     ### }
 560:	       00c12083          	lw	x1,12(x2)
 564:	       00812403          	lw	x8,8(x2)
 568:	       00412483          	lw	x9,4(x2)
 56c:	       00012903          	lw	x18,0(x2)
 570:	       01010113          	addi	x2,x2,16
 574:	       00008067          	jalr	x0,0(x1)

00000578 <_set_tls>:
 578:	00050213          	addi	x4,x10,0
 57c:	00008067          	jalr	x0,0(x1)

00000580 <memcpy>:
 580:	       00050313          	addi	x6,x10,0
 584:	/----- 00060e63          	beq	x12,x0,5a0 <memcpy+0x20>
 588:	|  /-> 00058383          	lb	x7,0(x11)
 58c:	|  |   00730023          	sb	x7,0(x6)
 590:	|  |   fff60613          	addi	x12,x12,-1
 594:	|  |   00130313          	addi	x6,x6,1
 598:	|  |   00158593          	addi	x11,x11,1
 59c:	|  \-- fe0616e3          	bne	x12,x0,588 <memcpy+0x8>
 5a0:	\----> 00008067          	jalr	x0,0(x1)

000005a4 <memset>:
 5a4:	       00050313          	addi	x6,x10,0
 5a8:	/----- 00060a63          	beq	x12,x0,5bc <memset+0x18>
 5ac:	|  /-> 00b30023          	sb	x11,0(x6)
 5b0:	|  |   fff60613          	addi	x12,x12,-1
 5b4:	|  |   00130313          	addi	x6,x6,1
 5b8:	|  \-- fe061ae3          	bne	x12,x0,5ac <memset+0x8>
 5bc:	\----> 00008067          	jalr	x0,0(x1)
