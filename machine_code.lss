
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
000003dc l     F .text	00000038 array_index
00000414 l     F .text	0000003c array_write8.isra.0
00000450 l     F .text	00000040 array_write.isra.0
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
000003b8 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000498 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000490 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000004d8 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000004bc g     F .text	0000001c memset
00000054 g     F .text	00000388 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000004d8 g       *ABS*	00000000 __data_source
000003b8  w      .debug_info	00000000 .hidden t1b_path_planner.c.d00475a7
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    4d800593          	addi	x11,x0,1240
  1c:	    00000613          	addi	x12,x0,0
  20:	    478000ef          	jal	x1,498 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    488000ef          	jal	x1,4bc <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    450000ef          	jal	x1,490 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 	return min_index;
     ### }
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                f1010113          	addi	x2,x2,-240
  58:	                0e812423          	sw	x8,232(x2)
  5c:	                0e112623          	sw	x1,236(x2)
  60:	                0e912223          	sw	x9,228(x2)
  64:	                0f212023          	sw	x18,224(x2)
  68:	                0d312e23          	sw	x19,220(x2)
  6c:	                0d412c23          	sw	x20,216(x2)
  70:	                0d512a23          	sw	x21,212(x2)
  74:	                0d612823          	sw	x22,208(x2)
  78:	                0d712623          	sw	x23,204(x2)
  7c:	                0d812423          	sw	x24,200(x2)
  80:	                0d912223          	sw	x25,196(x2)
  84:	                0da12023          	sw	x26,192(x2)
  88:	                0bb12e23          	sw	x27,188(x2)
     ###     // index to keep track of the path_planned array
     ###     uint8_t idx = 0;
     ### 
     ### 
     ###     // ############# Add your code here #############
     ###     if(!(30>START_POINT && START_POINT>=0 && 30>END_POINT && END_POINT>=0)) return 0;
  8c:	                02000437          	lui	x8,0x2000
  90:	                00044783          	lbu	x15,0(x8) # 2000000 <__bss_end>
  94:	                01d00713          	addi	x14,x0,29
  98:	                0ff7f793          	andi	x15,x15,255
  9c:	/-------------- 2af76863          	bltu	x14,x15,34c <__ram_size+0x24c>
  a0:	|               00044783          	lbu	x15,0(x8)
  a4:	|               00444783          	lbu	x15,4(x8)
  a8:	|               0ff7f793          	andi	x15,x15,255
  ac:	+-------------- 2af76063          	bltu	x14,x15,34c <__ram_size+0x24c>
  b0:	|               00444783          	lbu	x15,4(x8)
     ### 
     ###     uint32_t visited = 0x0; // visited vertices represented as a bit vector
     ###     
     ###     uint32_t prev[8] ={0}; // array to store the parent of each vertex, each 32 bit integer stores 4 vertices
  b4:	|               02000613          	addi	x12,x0,32
  b8:	|               00000593          	addi	x11,x0,0
  bc:	|               01810513          	addi	x10,x2,24
  c0:	|               3fc000ef          	jal	x1,4bc <memset>
     ###     
     ###     uint32_t dist[4] = {0}; // array to store the distance of each vertex, each 32 bit integer stores 8 vertices
     ### 
     ###     // adjacency matrix of the graph
     ###     path_planned[0] = 0b010000000000000000000000000000;
     ###     path_planned[1] = 0b101000000000000000000000000001;
  c4:	|               28000737          	lui	x14,0x28000
  c8:	|               00170713          	addi	x14,x14,1 # 28000001 <__global_pointer$+0x25fff801>
  cc:	|               02e12e23          	sw	x14,60(x2)
     ###     path_planned[2] = 0b010100001000000000000000000000;
  d0:	|               14200737          	lui	x14,0x14200
  d4:	|               04e12023          	sw	x14,64(x2)
     ###     path_planned[3] = 0b001010000000000000000000000010;
  d8:	|               0a000737          	lui	x14,0xa000
  dc:	|               00270713          	addi	x14,x14,2 # a000002 <__global_pointer$+0x7fff802>
  e0:	|               04e12223          	sw	x14,68(x2)
     ###     path_planned[4] = 0b000101100000000000000000000000;
  e4:	|               05800737          	lui	x14,0x5800
  e8:	|               04e12423          	sw	x14,72(x2)
     ###     path_planned[5] = 0b000010000000000000000000000000;
     ###     path_planned[6] = 0b000010010000000000000000000000;
  ec:	|               02400737          	lui	x14,0x2400
  f0:	|               04e12823          	sw	x14,80(x2)
     ###     path_planned[7] = 0b000000101000000000000000000000;
  f4:	|               00a00737          	lui	x14,0xa00
  f8:	|               04e12a23          	sw	x14,84(x2)
     ###     path_planned[8] = 0b001000010100100000000000000000;
  fc:	|               08520737          	lui	x14,0x8520
 100:	|               04e12c23          	sw	x14,88(x2)
     ###     path_planned[9] = 0b000000001011000000000000000000;
 104:	|               002c0737          	lui	x14,0x2c0
 108:	|               04e12e23          	sw	x14,92(x2)
     ###     path_planned[10] = 0b000000000100000000000000000000;
 10c:	|               00100737          	lui	x14,0x100
 110:	|               06e12023          	sw	x14,96(x2)
     ###     path_planned[11] = 0b000000000100000000000000000000;
 114:	|               06e12223          	sw	x14,100(x2)
     ###     path_planned[12] = 0b000000001000010000010000000000;
 118:	|               00210737          	lui	x14,0x210
 11c:	|               40070713          	addi	x14,x14,1024 # 210400 <__flash_size+0x20fc00>
 120:	|               06e12423          	sw	x14,104(x2)
     ###     path_planned[13] = 0b000000000000101000000000000000;
 124:	|               00028737          	lui	x14,0x28
 128:	|               06e12623          	sw	x14,108(x2)
     ###     path_planned[14] = 0b000000000000000110000000000000;
 12c:	|               00006737          	lui	x14,0x6
 130:	|               06e12823          	sw	x14,112(x2)
     ###     path_planned[15] = 0b000000000000001000000000000000;
 134:	|               00008737          	lui	x14,0x8
 138:	|               06e12a23          	sw	x14,116(x2)
     ###     path_planned[16] = 0b000000000000001001100000000000;
 13c:	|               0000a737          	lui	x14,0xa
 140:	|               80070713          	addi	x14,x14,-2048 # 9800 <__flash_size+0x9000>
 144:	|               06e12c23          	sw	x14,120(x2)
     ###     path_planned[17] = 0b000000000000000010000000000000;
 148:	|               00002737          	lui	x14,0x2
 14c:	|               06e12e23          	sw	x14,124(x2)
     ###     path_planned[18] = 0b000000000000000010010000000000;
 150:	|               40070713          	addi	x14,x14,1024 # 2400 <__flash_size+0x1c00>
 154:	|               08e12023          	sw	x14,128(x2)
     ###     path_planned[19] = 0b000000000000100000101000000000;
 158:	|               00021737          	lui	x14,0x21
 15c:	|               a0070713          	addi	x14,x14,-1536 # 20a00 <__flash_size+0x20200>
 160:	|               08e12223          	sw	x14,132(x2)
     ###     path_planned[20] = 0b000000000000000000010100100001;
 164:	|               52100713          	addi	x14,x0,1313
 168:	|               08e12423          	sw	x14,136(x2)
     ###     path_planned[21] = 0b000000000000000000001011000000;
 16c:	|               2c000713          	addi	x14,x0,704
 170:	|               08e12623          	sw	x14,140(x2)
     ###     path_planned[22] = 0b000000000000000000000100000000;
 174:	|               10000713          	addi	x14,x0,256
 178:	|               08e12823          	sw	x14,144(x2)
     ###     path_planned[23] = 0b000000000000000000000100000000;
 17c:	|               08e12a23          	sw	x14,148(x2)
     ###     path_planned[24] = 0b000000000000000000001000010000;
 180:	|               21000713          	addi	x14,x0,528
 184:	|               08e12c23          	sw	x14,152(x2)
     ###     path_planned[25] = 0b000000000000000000000000101000;
 188:	|               02800713          	addi	x14,x0,40
 18c:	|               08e12e23          	sw	x14,156(x2)
     ###     path_planned[26] = 0b000000000000000000000000010110;
 190:	|               01600713          	addi	x14,x0,22
     ###     path_planned[0] = 0b010000000000000000000000000000;
 194:	|               100007b7          	lui	x15,0x10000
     ###     path_planned[26] = 0b000000000000000000000000010110;
 198:	|               0ae12023          	sw	x14,160(x2)
     ###     path_planned[27] = 0b000000000000000000000000001000;
 19c:	|               00800713          	addi	x14,x0,8
     ###     path_planned[0] = 0b010000000000000000000000000000;
 1a0:	|               02f12c23          	sw	x15,56(x2)
     ###     path_planned[27] = 0b000000000000000000000000001000;
 1a4:	|               0ae12223          	sw	x14,164(x2)
     ###     path_planned[28] = 0b000100000000000000000000001001;
     ###     path_planned[29] = 0b010000000000000000001000000010;
 1a8:	|               20278793          	addi	x15,x15,514 # 10000202 <__global_pointer$+0xdfffa02>
     ###     path_planned[28] = 0b000100000000000000000000001001;
 1ac:	|               04000737          	lui	x14,0x4000
 1b0:	|               00970713          	addi	x14,x14,9 # 4000009 <__global_pointer$+0x1fff809>
     ###     path_planned[29] = 0b010000000000000000001000000010;
 1b4:	|               0af12623          	sw	x15,172(x2)
     ### 
     ###     // initialize the distance of all vertices to infinity
     ###     for (uint8_t i = 0; i < 4; i++) {
     ###         dist[i] = 0xffffffff;
 1b8:	|               fff00793          	addi	x15,x0,-1
     ###     path_planned[28] = 0b000100000000000000000000001001;
 1bc:	|               0ae12423          	sw	x14,168(x2)
     ###         dist[i] = 0xffffffff;
 1c0:	|               00f12423          	sw	x15,8(x2)
 1c4:	|               00f12623          	sw	x15,12(x2)
     ###     path_planned[5] = 0b000010000000000000000000000000;
 1c8:	|               04812623          	sw	x8,76(x2)
     ###         dist[i] = 0xffffffff;
 1cc:	|               00f12823          	sw	x15,16(x2)
 1d0:	|               00f12a23          	sw	x15,20(x2)
     ###     }
     ### 
     ###     // initialize the distance of the start vertex to 0
     ###     array_write(dist, &START_POINT, 0);
 1d4:	|               00044583          	lbu	x11,0(x8)
 1d8:	|               00000613          	addi	x12,x0,0
 1dc:	|               00810513          	addi	x10,x2,8
 1e0:	|               270000ef          	jal	x1,450 <array_write.isra.0>
     ###     // initialize the parent of the start vertex to 0xff
     ###     array_write8(prev, &START_POINT, 0xff);
 1e4:	|               00044583          	lbu	x11,0(x8)
 1e8:	|               0ff00613          	addi	x12,x0,255
 1ec:	|               01810513          	addi	x10,x2,24
 1f0:	|               224000ef          	jal	x1,414 <array_write8.isra.0>
 1f4:	|               01d00493          	addi	x9,x0,29
     ###     uint32_t visited = 0x0; // visited vertices represented as a bit vector
 1f8:	|               00000913          	addi	x18,x0,0
     ### 	int min = INF, min_index;
 1fc:	|               00f00d13          	addi	x26,x0,15
     ###     return ((*n >> (29-*i)) & 1);
 200:	|               01d00b93          	addi	x23,x0,29
     ### 	for (uint8_t v = 0; v < V; v++)
 204:	|               01e00c13          	addi	x24,x0,30
     ###     *n |= 0x20000000 >> *i;
 208:	|               20000db7          	lui	x27,0x20000
     ### int main(int argc, char const *argv[]) {
 20c:	|  /----------> 00000413          	addi	x8,x0,0
     ### 	int min = INF, min_index;
 210:	|  |            00f00a13          	addi	x20,x0,15
     ###     return ((*n >> (29-*i)) & 1);
 214:	|  |     /----> 408b87b3          	sub	x15,x23,x8
 218:	|  |     |      00f957b3          	srl	x15,x18,x15
 21c:	|  |     |      0017f793          	andi	x15,x15,1
 220:	|  |     |      0ff47593          	andi	x11,x8,255
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 224:	|  |     |  /-- 00079c63          	bne	x15,x0,23c <__ram_size+0x13c>
 228:	|  |     |  |   00810513          	addi	x10,x2,8
 22c:	|  |     |  |   1b0000ef          	jal	x1,3dc <array_index>
 230:	|  |     |  +-- 00aa4663          	blt	x20,x10,23c <__ram_size+0x13c>
     ### 			min = array_index (dist,v), min_index = v;
 234:	|  |     |  |   00040993          	addi	x19,x8,0
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 238:	|  |     |  |   00050a13          	addi	x20,x10,0 # ff000000 <__global_pointer$+0xfcfff800>
     ### 	for (uint8_t v = 0; v < V; v++)
 23c:	|  |     |  \-> 00140413          	addi	x8,x8,1
 240:	|  |     \----- fd841ae3          	bne	x8,x24,214 <__ram_size+0x114>
     ###     for (uint8_t i = 0; i < V - 1; i++) {
     ###         // pick the vertex with the minimum distance from the set of unvisited vertices
     ### 		uint8_t u = minDistance(dist, &visited);
     ### 
     ###         //break if the destination is reached
     ###         if (u == END_POINT) break;
 244:	|  |            020007b7          	lui	x15,0x2000
 248:	|  |            0047c783          	lbu	x15,4(x15) # 2000004 <__bss_end+0x4>
     ### 	return min_index;
 24c:	|  |            0ff9fa13          	andi	x20,x19,255
     ###         if (u == END_POINT) break;
 250:	|  |            0ff7f793          	andi	x15,x15,255
 254:	|  |  /-------- 09478e63          	beq	x15,x20,2f0 <__ram_size+0x1f0>
     ###     *n |= 0x20000000 >> *i;
 258:	|  |  |         413dd7b3          	sra	x15,x27,x19
 25c:	|  |  |         00f96933          	or	x18,x18,x15
     ###     return ((*n >> (29-*i)) & 1);
 260:	|  |  |         00299a93          	slli	x21,x19,0x2
 264:	|  |  |         0b010793          	addi	x15,x2,176
     ###     *n |= 0x20000000 >> *i;
 268:	|  |  |         00000c93          	addi	x25,x0,0
     ###     return ((*n >> (29-*i)) & 1);
 26c:	|  |  |         01578ab3          	add	x21,x15,x21
 270:	|  |  |  /----> 419b8633          	sub	x12,x23,x25
 274:	|  |  |  |      00c956b3          	srl	x13,x18,x12
 278:	|  |  |  |      0016f693          	andi	x13,x13,1
 27c:	|  |  |  |      0ffcfb13          	andi	x22,x25,255
     ###         //mark the vertex as visited
     ### 		bit_load(&visited,&u);
     ### 
     ###         // updating the distance of the adjacent unvisited vertices
     ### 		for (uint8_t v = 0; v < V; v++)
     ### 			if (!bit_position (&visited,&v) && bit_position (&path_planned[u],&v)   
 280:	|  |  |  |  /-- 04069e63          	bne	x13,x0,2dc <__ram_size+0x1dc>
     ###     return ((*n >> (29-*i)) & 1);
 284:	|  |  |  |  |   f88aa703          	lw	x14,-120(x21)
 288:	|  |  |  |  |   00c75733          	srl	x14,x14,x12
 28c:	|  |  |  |  |   00177713          	andi	x14,x14,1
     ### 			if (!bit_position (&visited,&v) && bit_position (&path_planned[u],&v)   
 290:	|  |  |  |  +-- 04070663          	beq	x14,x0,2dc <__ram_size+0x1dc>
     ###                                 // if the vertex is not visited (value of current v has never been the value of u) 
     ###                                 //and there is an edge between u and v
     ### 				&& array_index(dist,u) != INF  
 294:	|  |  |  |  |   000a0593          	addi	x11,x20,0
 298:	|  |  |  |  |   00810513          	addi	x10,x2,8
 29c:	|  |  |  |  |   140000ef          	jal	x1,3dc <array_index>
 2a0:	|  |  |  |  |   00050413          	addi	x8,x10,0
 2a4:	|  |  |  |  +-- 03a50c63          	beq	x10,x26,2dc <__ram_size+0x1dc>
     ###                                 // if the distance of u is not infinity
     ### 				&& array_index(dist,u) + bit_position (&path_planned[u],&v) < array_index(dist,v)) 
 2a8:	|  |  |  |  |   000b0593          	addi	x11,x22,0
 2ac:	|  |  |  |  |   00810513          	addi	x10,x2,8
 2b0:	|  |  |  |  |   12c000ef          	jal	x1,3dc <array_index>
 2b4:	|  |  |  |  |   00140613          	addi	x12,x8,1
 2b8:	|  |  |  |  +-- 02a65263          	bge	x12,x10,2dc <__ram_size+0x1dc>
     ###                                 // sum of distance to u and edge weight of v-u is 
     ###                                 //less than the distance to v (v is not visited)
     ###                 {
     ###                     array_write(dist,&v,array_index(dist,u) + bit_position (&path_planned[u],&v)); //update the distance of v     
 2bc:	|  |  |  |  |   0ff67613          	andi	x12,x12,255
 2c0:	|  |  |  |  |   000b0593          	addi	x11,x22,0
 2c4:	|  |  |  |  |   00810513          	addi	x10,x2,8
 2c8:	|  |  |  |  |   188000ef          	jal	x1,450 <array_write.isra.0>
     ###                     array_write8(prev,&v, u); //update the parent of v
 2cc:	|  |  |  |  |   000a0613          	addi	x12,x20,0
 2d0:	|  |  |  |  |   000b0593          	addi	x11,x22,0
 2d4:	|  |  |  |  |   01810513          	addi	x10,x2,24
 2d8:	|  |  |  |  |   13c000ef          	jal	x1,414 <array_write8.isra.0>
     ### 		for (uint8_t v = 0; v < V; v++)
 2dc:	|  |  |  |  \-> 001c8c93          	addi	x25,x25,1
 2e0:	|  |  |  \----- f98c98e3          	bne	x25,x24,270 <__ram_size+0x170>
     ###     for (uint8_t i = 0; i < V - 1; i++) {
 2e4:	|  |  |         fff48493          	addi	x9,x9,-1
 2e8:	|  |  |         0ff4f493          	andi	x9,x9,255
 2ec:	|  \--|-------- f20490e3          	bne	x9,x0,20c <__ram_size+0x10c>
     ###                 }
     ### 	}
     ### 
     ###     // backtracking the path from the destination to the start
     ###     uint8_t currentVertex = END_POINT;
 2f0:	|     \-------> 020007b7          	lui	x15,0x2000
 2f4:	|               0047c703          	lbu	x14,4(x15) # 2000004 <__bss_end+0x4>
     ### 
     ###     path_planned[(idx)++] = currentVertex;
     ###     while (currentVertex != START_POINT) {
 2f8:	|               020005b7          	lui	x11,0x2000
     ###     path_planned[(idx)++] = currentVertex;
 2fc:	|               00100793          	addi	x15,x0,1
     ###     uint8_t currentVertex = END_POINT;
 300:	|               0ff77713          	andi	x14,x14,255
     ###     path_planned[(idx)++] = currentVertex;
 304:	|               02e12c23          	sw	x14,56(x2)
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 308:	|               ff000537          	lui	x10,0xff000
     ###     while (currentVertex != START_POINT) {
 30c:	|     /-------> 0005c683          	lbu	x13,0(x11) # 2000000 <__bss_end>
 310:	|     |         0ff6f693          	andi	x13,x13,255
 314:	|     |  /----- 06e69c63          	bne	x13,x14,38c <__ram_size+0x28c>
     ###     }
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = --idx; i >=0; i--) {
 318:	|     |  |      fff78793          	addi	x15,x15,-1
 31c:	|     |  |      0ff7f793          	andi	x15,x15,255
     ###         NODE_POINT = path_planned[i];
 320:	|     |  |      020006b7          	lui	x13,0x2000
     ###     for (int i = --idx; i >=0; i--) {
 324:	|     |  |      fff00613          	addi	x12,x0,-1
     ###         NODE_POINT = path_planned[i];
 328:	|     |  |  /-> 00279713          	slli	x14,x15,0x2
 32c:	|     |  |  |   03810593          	addi	x11,x2,56
 330:	|     |  |  |   00e58733          	add	x14,x11,x14
 334:	|     |  |  |   00074703          	lbu	x14,0(x14)
     ###     for (int i = --idx; i >=0; i--) {
 338:	|     |  |  |   fff78793          	addi	x15,x15,-1
     ###         NODE_POINT = path_planned[i];
 33c:	|     |  |  |   00e68423          	sb	x14,8(x13) # 2000008 <__bss_end+0x8>
     ###     for (int i = --idx; i >=0; i--) {
 340:	|     |  |  \-- fec794e3          	bne	x15,x12,328 <__ram_size+0x228>
     ###     }
     ### 
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 344:	|     |  |      00100793          	addi	x15,x0,1
 348:	|     |  |      00f68623          	sb	x15,12(x13)
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 34c:	\-----|--|----> 0ec12083          	lw	x1,236(x2)
 350:	      |  |      0e812403          	lw	x8,232(x2)
 354:	      |  |      0e412483          	lw	x9,228(x2)
 358:	      |  |      0e012903          	lw	x18,224(x2)
 35c:	      |  |      0dc12983          	lw	x19,220(x2)
 360:	      |  |      0d812a03          	lw	x20,216(x2)
 364:	      |  |      0d412a83          	lw	x21,212(x2)
 368:	      |  |      0d012b03          	lw	x22,208(x2)
 36c:	      |  |      0cc12b83          	lw	x23,204(x2)
 370:	      |  |      0c812c03          	lw	x24,200(x2)
 374:	      |  |      0c412c83          	lw	x25,196(x2)
 378:	      |  |      0c012d03          	lw	x26,192(x2)
 37c:	      |  |      0bc12d83          	lw	x27,188(x2)
 380:	      |  |      00000513          	addi	x10,x0,0
 384:	      |  |      0f010113          	addi	x2,x2,240
 388:	      |  |      00008067          	jalr	x0,0(x1)
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 38c:	      |  \----> 00377613          	andi	x12,x14,3
 390:	      |         0b010693          	addi	x13,x2,176
 394:	      |         0fc77713          	andi	x14,x14,252
 398:	      |         00e68733          	add	x14,x13,x14
 39c:	      |         f6872703          	lw	x14,-152(x14)
 3a0:	      |         00361693          	slli	x13,x12,0x3
 3a4:	      |         00d556b3          	srl	x13,x10,x13
 3a8:	      |         fff64613          	xori	x12,x12,-1
 3ac:	      |         00e6f6b3          	and	x13,x13,x14
 3b0:	      |         00361613          	slli	x12,x12,0x3
 3b4:	      |         00c6d6b3          	srl	x13,x13,x12
     ###         path_planned[(idx)++]= currentVertex = array_index8(prev,currentVertex);
 3b8:	      |         0b010813          	addi	x16,x2,176
 3bc:	      |         00178613          	addi	x12,x15,1
 3c0:	      |         00279793          	slli	x15,x15,0x2
 3c4:	      |         00f807b3          	add	x15,x16,x15
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 3c8:	      |         0ff6f713          	andi	x14,x13,255
     ###         path_planned[(idx)++]= currentVertex = array_index8(prev,currentVertex);
 3cc:	      |         0ff6f693          	andi	x13,x13,255
 3d0:	      |         f8d7a423          	sw	x13,-120(x15)
 3d4:	      |         0ff67793          	andi	x15,x12,255
 3d8:	      \-------- f35ff06f          	jal	x0,30c <__ram_size+0x20c>

000003dc <array_index>:
     ###     return (arr[(n & 0xf8)>>3]&(0XF0000000>>((n&0x7)*4)))>>(~(n&0x7)*4); 
 3dc:	0075f793          	andi	x15,x11,7
 3e0:	0035d593          	srli	x11,x11,0x3
 3e4:	00259593          	slli	x11,x11,0x2
 3e8:	00b505b3          	add	x11,x10,x11
 3ec:	00279713          	slli	x14,x15,0x2
 3f0:	f0000537          	lui	x10,0xf0000
 3f4:	00e55533          	srl	x10,x10,x14
 3f8:	0005a703          	lw	x14,0(x11)
 3fc:	fff7c793          	xori	x15,x15,-1
 400:	00279793          	slli	x15,x15,0x2
 404:	00e57533          	and	x10,x10,x14
 408:	00f55533          	srl	x10,x10,x15
     ### } 
 40c:	0ff57513          	andi	x10,x10,255
 410:	00008067          	jalr	x0,0(x1)

00000414 <array_write8.isra.0>:
     ###     arr[(*n & 0xfc)>>2] = (arr[(*n & 0xfc)>>2]&~(0XFF000000>>((*n&0x3)*8))) | (val << (~(*n&0x3)*8));
 414:	0fc5f793          	andi	x15,x11,252
 418:	0035f593          	andi	x11,x11,3
 41c:	00f50533          	add	x10,x10,x15
 420:	00359713          	slli	x14,x11,0x3
 424:	ff0007b7          	lui	x15,0xff000
 428:	00e7d7b3          	srl	x15,x15,x14
 42c:	00052703          	lw	x14,0(x10)
 430:	fff5c593          	xori	x11,x11,-1
 434:	fff7c793          	xori	x15,x15,-1
 438:	00359593          	slli	x11,x11,0x3
 43c:	00e7f7b3          	and	x15,x15,x14
 440:	00b615b3          	sll	x11,x12,x11
 444:	00b7e7b3          	or	x15,x15,x11
 448:	00f52023          	sw	x15,0(x10)
     ### }
 44c:	00008067          	jalr	x0,0(x1)

00000450 <array_write.isra.0>:
     ###     arr[(*n & 0xf8)>>3] = (arr[(*n & 0xf8)>>3]&~(0XF0000000>>((*n&0x7)*4))) | (val << (~(*n&0x7)*4));
 450:	0035d793          	srli	x15,x11,0x3
 454:	00279793          	slli	x15,x15,0x2
 458:	0075f593          	andi	x11,x11,7
 45c:	00f50533          	add	x10,x10,x15
 460:	00259713          	slli	x14,x11,0x2
 464:	f00007b7          	lui	x15,0xf0000
 468:	00e7d7b3          	srl	x15,x15,x14
 46c:	00052703          	lw	x14,0(x10)
 470:	fff5c593          	xori	x11,x11,-1
 474:	fff7c793          	xori	x15,x15,-1
 478:	00259593          	slli	x11,x11,0x2
 47c:	00e7f7b3          	and	x15,x15,x14
 480:	00b615b3          	sll	x11,x12,x11
 484:	00b7e7b3          	or	x15,x15,x11
 488:	00f52023          	sw	x15,0(x10)
     ### }
 48c:	00008067          	jalr	x0,0(x1)

00000490 <_set_tls>:
 490:	00050213          	addi	x4,x10,0
 494:	00008067          	jalr	x0,0(x1)

00000498 <memcpy>:
 498:	       00050313          	addi	x6,x10,0
 49c:	/----- 00060e63          	beq	x12,x0,4b8 <memcpy+0x20>
 4a0:	|  /-> 00058383          	lb	x7,0(x11)
 4a4:	|  |   00730023          	sb	x7,0(x6)
 4a8:	|  |   fff60613          	addi	x12,x12,-1
 4ac:	|  |   00130313          	addi	x6,x6,1
 4b0:	|  |   00158593          	addi	x11,x11,1
 4b4:	|  \-- fe0616e3          	bne	x12,x0,4a0 <memcpy+0x8>
 4b8:	\----> 00008067          	jalr	x0,0(x1)

000004bc <memset>:
 4bc:	       00050313          	addi	x6,x10,0
 4c0:	/----- 00060a63          	beq	x12,x0,4d4 <memset+0x18>
 4c4:	|  /-> 00b30023          	sb	x11,0(x6)
 4c8:	|  |   fff60613          	addi	x12,x12,-1
 4cc:	|  |   00130313          	addi	x6,x6,1
 4d0:	|  \-- fe061ae3          	bne	x12,x0,4c4 <memset+0x8>
 4d4:	\----> 00008067          	jalr	x0,0(x1)
