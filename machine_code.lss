
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
00000424 l     F .text	0000003c array_index.constprop.0
00000460 l     F .text	00000048 array_write.constprop.0.isra.0
000004a8 l     F .text	00000044 array_write8.constprop.0.isra.0
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
000003f5 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000004f4 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
000004ec g     F .text	00000008 _set_tls
000003f5  w      .debug_info	00000000 .hidden t1b_path_planner.c.ca96436a
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000534 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000518 g     F .text	0000001c memset
00000054 g     F .text	000003d0 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000538 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    53800593          	addi	x11,x0,1336
  1c:	    00000613          	addi	x12,x0,0
  20:	    4d4000ef          	jal	x1,4f4 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    4e4000ef          	jal	x1,518 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    4ac000ef          	jal	x1,4ec <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 	return min_index;
     ### }
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                      fb010113          	addi	x2,x2,-80
  58:	                      04812423          	sw	x8,72(x2)
  5c:	                      04112623          	sw	x1,76(x2)
  60:	                      04912223          	sw	x9,68(x2)
  64:	                      05212023          	sw	x18,64(x2)
  68:	                      03312e23          	sw	x19,60(x2)
  6c:	                      03412c23          	sw	x20,56(x2)
  70:	                      03512a23          	sw	x21,52(x2)
  74:	                      03612823          	sw	x22,48(x2)
  78:	                      03712623          	sw	x23,44(x2)
  7c:	                      03812423          	sw	x24,40(x2)
  80:	                      03912223          	sw	x25,36(x2)
  84:	                      03a12023          	sw	x26,32(x2)
  88:	                      01b12e23          	sw	x27,28(x2)
     ###     uint8_t idx = 0;
     ### 
     ### 
     ###     
     ###     // check if the start and end points are valid
     ###     if(!(30>START_POINT && START_POINT>=0 && 30>END_POINT && END_POINT>=0)) return 0;
  8c:	                      02000437          	lui	x8,0x2000
  90:	                      00044783          	lbu	x15,0(x8) # 2000000 <__bss_end>
  94:	                      01d00713          	addi	x14,x0,29
  98:	                      0ff7f793          	andi	x15,x15,255
  9c:	/-------------------- 2ef76c63          	bltu	x14,x15,394 <__ram_size+0x294>
  a0:	|                     00044783          	lbu	x15,0(x8)
  a4:	|                     00444783          	lbu	x15,4(x8)
  a8:	|                     0ff7f793          	andi	x15,x15,255
  ac:	+-------------------- 2ef76463          	bltu	x14,x15,394 <__ram_size+0x294>
  b0:	|                     00444783          	lbu	x15,4(x8)
     ###     for (uint8_t i = 0; i < 4; i++) {
     ###         dist[i] = 0xffffffff;
     ###     }
     ### 
     ###     // initialize the distance of the start vertex to 0
     ###     array_write(dist, &START_POINT, 0);
  b4:	|                     00000593          	addi	x11,x0,0
     ###     path_planned [0] = 0x01ffffff;
  b8:	|                     fff40793          	addi	x15,x8,-1
  bc:	|                     02f42823          	sw	x15,48(x8)
     ###     path_planned [1] = 0x001dff02;
  c0:	|                     001e07b7          	lui	x15,0x1e0
  c4:	|                     f0278793          	addi	x15,x15,-254 # 1dff02 <__flash_size+0x1df702>
  c8:	|                     02f42a23          	sw	x15,52(x8)
     ###     path_planned [2] = 0x0108ff03;
  cc:	|                     010907b7          	lui	x15,0x1090
  d0:	|                     f0378793          	addi	x15,x15,-253 # 108ff03 <__flash_size+0x108f703>
  d4:	|                     02f42c23          	sw	x15,56(x8)
     ###     path_planned [3] = 0x02ff041c;
  d8:	|                     02ff07b7          	lui	x15,0x2ff0
  dc:	|                     41c78793          	addi	x15,x15,1052 # 2ff041c <__global_pointer$+0xfefc1c>
  e0:	|                     02f42e23          	sw	x15,60(x8)
     ###     path_planned [4] = 0x030506ff;
  e4:	|                     030507b7          	lui	x15,0x3050
  e8:	|                     6ff78793          	addi	x15,x15,1791 # 30506ff <__global_pointer$+0x104feff>
  ec:	|                     04f42023          	sw	x15,64(x8)
     ###     path_planned [5] = 0x04ffffff;
  f0:	|                     050007b7          	lui	x15,0x5000
  f4:	|                     fff78793          	addi	x15,x15,-1 # 4ffffff <__global_pointer$+0x2fff7ff>
  f8:	|                     04f42223          	sw	x15,68(x8)
     ###     path_planned [6] = 0x04ff07ff;
  fc:	|                     04ff07b7          	lui	x15,0x4ff0
 100:	|                     7ff78793          	addi	x15,x15,2047 # 4ff07ff <__global_pointer$+0x2feffff>
 104:	|                     04f42423          	sw	x15,72(x8)
     ###     path_planned [7] = 0x08ff06ff;
 108:	|                     08ff07b7          	lui	x15,0x8ff0
 10c:	|                     6ff78793          	addi	x15,x15,1791 # 8ff06ff <__global_pointer$+0x6fefeff>
 110:	|                     04f42623          	sw	x15,76(x8)
     ###     path_planned [8] = 0x0702090c;
 114:	|                     070217b7          	lui	x15,0x7021
 118:	|                     90c78793          	addi	x15,x15,-1780 # 702090c <__global_pointer$+0x502010c>
 11c:	|                     04f42823          	sw	x15,80(x8)
     ###     path_planned [9] = 0x080aff0b;
 120:	|                     080b07b7          	lui	x15,0x80b0
 124:	|                     f0b78793          	addi	x15,x15,-245 # 80aff0b <__global_pointer$+0x60af70b>
 128:	|                     04f42a23          	sw	x15,84(x8)
     ###     path_planned [10] = 0x09ffffff;
 12c:	|                     0a0007b7          	lui	x15,0xa000
 130:	|                     fff78793          	addi	x15,x15,-1 # 9ffffff <__global_pointer$+0x7fff7ff>
 134:	|                     04f42c23          	sw	x15,88(x8)
     ###     path_planned [11] = 0x09ffffff;
 138:	|                     04f42e23          	sw	x15,92(x8)
     ###     path_planned [12] = 0x0813ff0d;
 13c:	|                     081407b7          	lui	x15,0x8140
 140:	|                     f0d78793          	addi	x15,x15,-243 # 813ff0d <__global_pointer$+0x613f70d>
 144:	|                     06f42023          	sw	x15,96(x8)
     ###     path_planned [13] = 0x0eff0cff;
 148:	|                     0eff17b7          	lui	x15,0xeff1
 14c:	|                     cff78793          	addi	x15,x15,-769 # eff0cff <__global_pointer$+0xcff04ff>
 150:	|                     06f42223          	sw	x15,100(x8)
     ###     path_planned [14] = 0x0d0f10ff;
 154:	|                     0d0f17b7          	lui	x15,0xd0f1
 158:	|                     0ff78793          	addi	x15,x15,255 # d0f10ff <__global_pointer$+0xb0f08ff>
 15c:	|                     06f42423          	sw	x15,104(x8)
     ###     path_planned [15] = 0x0effffff;
 160:	|                     0f0007b7          	lui	x15,0xf000
 164:	|                     fff78793          	addi	x15,x15,-1 # effffff <__global_pointer$+0xcfff7ff>
 168:	|                     06f42623          	sw	x15,108(x8)
     ###     path_planned [16] = 0x0e1112ff;
 16c:	|                     0e1117b7          	lui	x15,0xe111
 170:	|                     2ff78793          	addi	x15,x15,767 # e1112ff <__global_pointer$+0xc110aff>
 174:	|                     06f42823          	sw	x15,112(x8)
     ###     path_planned [17] = 0x10ffffff;
 178:	|                     110007b7          	lui	x15,0x11000
 17c:	|                     fff78793          	addi	x15,x15,-1 # 10ffffff <__global_pointer$+0xefff7ff>
 180:	|                     06f42a23          	sw	x15,116(x8)
     ###     path_planned [18] = 0x13ff10ff;
 184:	|                     13ff17b7          	lui	x15,0x13ff1
 188:	|                     0ff78793          	addi	x15,x15,255 # 13ff10ff <__global_pointer$+0x11ff08ff>
 18c:	|                     06f42c23          	sw	x15,120(x8)
     ###     path_planned [19] = 0x12ff0c14;
 190:	|                     12ff17b7          	lui	x15,0x12ff1
 194:	|                     c1478793          	addi	x15,x15,-1004 # 12ff0c14 <__global_pointer$+0x10ff0414>
 198:	|                     06f42e23          	sw	x15,124(x8)
     ###     path_planned [20] = 0x13151d18;
 19c:	|                     131527b7          	lui	x15,0x13152
 1a0:	|                     d1878793          	addi	x15,x15,-744 # 13151d18 <__global_pointer$+0x11151518>
 1a4:	|                     08f42023          	sw	x15,128(x8)
     ###     path_planned [21] = 0x1417ff16;
 1a8:	|                     141807b7          	lui	x15,0x14180
 1ac:	|                     f1678793          	addi	x15,x15,-234 # 1417ff16 <__global_pointer$+0x1217f716>
 1b0:	|                     08f42223          	sw	x15,132(x8)
     ###     path_planned [22] = 0x15ffffff;
 1b4:	|                     160007b7          	lui	x15,0x16000
 1b8:	|                     fff78793          	addi	x15,x15,-1 # 15ffffff <__global_pointer$+0x13fff7ff>
 1bc:	|                     08f42423          	sw	x15,136(x8)
     ###     path_planned [23] = 0x15ffffff;
 1c0:	|                     08f42623          	sw	x15,140(x8)
     ###     path_planned [24] = 0x19ff14ff;
 1c4:	|                     19ff17b7          	lui	x15,0x19ff1
 1c8:	|                     4ff78793          	addi	x15,x15,1279 # 19ff14ff <__global_pointer$+0x17ff0cff>
 1cc:	|                     08f42823          	sw	x15,144(x8)
     ###     path_planned [25] = 0x1aff18ff;
 1d0:	|                     1aff27b7          	lui	x15,0x1aff2
 1d4:	|                     8ff78713          	addi	x14,x15,-1793 # 1aff18ff <__global_pointer$+0x18ff10ff>
 1d8:	|                     08e42a23          	sw	x14,148(x8)
     ###     path_planned [28] = 0x1aff1d03;
 1dc:	|                     d0378793          	addi	x15,x15,-765
     ###     path_planned [26] = 0x191b1cff;
 1e0:	|                     191b2737          	lui	x14,0x191b2
     ###     path_planned [28] = 0x1aff1d03;
 1e4:	|                     0af42023          	sw	x15,160(x8)
     ###     path_planned [26] = 0x191b1cff;
 1e8:	|                     cff70713          	addi	x14,x14,-769 # 191b1cff <__global_pointer$+0x171b14ff>
     ###     path_planned [29] = 0x1cff1401;
 1ec:	|                     1cff17b7          	lui	x15,0x1cff1
     ###     path_planned [26] = 0x191b1cff;
 1f0:	|                     08e42c23          	sw	x14,152(x8)
     ###     path_planned [29] = 0x1cff1401;
 1f4:	|                     40178793          	addi	x15,x15,1025 # 1cff1401 <__global_pointer$+0x1aff0c01>
     ###     path_planned [27] = 0x1affffff;
 1f8:	|                     1b000737          	lui	x14,0x1b000
 1fc:	|                     fff70713          	addi	x14,x14,-1 # 1affffff <__global_pointer$+0x18fff7ff>
     ###     path_planned [29] = 0x1cff1401;
 200:	|                     0af42223          	sw	x15,164(x8)
     ###         dist[i] = 0xffffffff;
 204:	|                     fff00793          	addi	x15,x0,-1
     ###     path_planned [27] = 0x1affffff;
 208:	|                     08e42e23          	sw	x14,156(x8)
     ###         dist[i] = 0xffffffff;
 20c:	|                     0af42423          	sw	x15,168(x8)
 210:	|                     0af42623          	sw	x15,172(x8)
     ###     array_write(dist, &START_POINT, 0);
 214:	|                     00044503          	lbu	x10,0(x8)
     ###         dist[i] = 0xffffffff;
 218:	|                     0af42823          	sw	x15,176(x8)
 21c:	|                     0af42a23          	sw	x15,180(x8)
     ###     array_write(dist, &START_POINT, 0);
 220:	|                     240000ef          	jal	x1,460 <array_write.constprop.0.isra.0>
     ###     // initialize the parent of the start vertex to 0xff
     ###     array_write8(prev, &START_POINT, 0xff);
 224:	|                     00044503          	lbu	x10,0(x8)
 228:	|                     0ff00593          	addi	x11,x0,255
     ###     for (uint8_t i = 0; i < V - 1; i++) {
     ###         // pick the vertex with the minimum distance from the set of unvisited vertices
     ### 		uint8_t u = minDistance(dist, &visited);
     ### 
     ###         //break if the destination is reached
     ###         if (u == END_POINT) break;
 22c:	|                     02000b37          	lui	x22,0x2000
     ###     array_write8(prev, &START_POINT, 0xff);
 230:	|                     278000ef          	jal	x1,4a8 <array_write8.constprop.0.isra.0>
 234:	|                     01d00413          	addi	x8,x0,29
     ###     uint32_t visited = 0x0; // visited vertices represented as a bit vector
 238:	|                     00000493          	addi	x9,x0,0
     ###         //mark the vertex as visited
     ### 		bit_load(&visited,&u);
     ### 
     ###         // updating the distance of the adjacent unvisited vertices
     ### 		for (uint8_t v = 0; v < V; v++){
     ###             bool weight = is_node_connected(&path_planned[u],&v);
 23c:	|                     030b0c13          	addi	x24,x22,48 # 2000030 <__bss_end+0x30>
     ###     for (uint8_t i = 0; i < 4; i++) {
 240:	|                     02000c93          	addi	x25,x0,32
     ### int main(int argc, char const *argv[]) {
 244:	|        /----------> 00000993          	addi	x19,x0,0
     ### 	int min = INF, min_index;
 248:	|        |            00f00a13          	addi	x20,x0,15
     ###     return ((*n >> (29-*i)) & 1);
 24c:	|        |            01d00d13          	addi	x26,x0,29
     ### 	for (uint8_t v = 0; v < V; v++)
 250:	|        |            01e00a93          	addi	x21,x0,30
     ###     return ((*n >> (29-*i)) & 1);
 254:	|        |     /----> 413d07b3          	sub	x15,x26,x19
 258:	|        |     |      00f4d7b3          	srl	x15,x9,x15
 25c:	|        |     |      0017f793          	andi	x15,x15,1
 260:	|        |     |      0ff9f513          	andi	x10,x19,255
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 264:	|        |     |  /-- 00079a63          	bne	x15,x0,278 <__ram_size+0x178>
 268:	|        |     |  |   1bc000ef          	jal	x1,424 <array_index.constprop.0>
 26c:	|        |     |  +-- 00aa4663          	blt	x20,x10,278 <__ram_size+0x178>
     ### 			min = array_index (dist,v), min_index = v;
 270:	|        |     |  |   00098913          	addi	x18,x19,0
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 274:	|        |     |  |   00050a13          	addi	x20,x10,0 # ff000000 <__global_pointer$+0xfcfff800>
     ### 	for (uint8_t v = 0; v < V; v++)
 278:	|        |     |  \-> 00198993          	addi	x19,x19,1
 27c:	|        |     \----- fd599ce3          	bne	x19,x21,254 <__ram_size+0x154>
     ###         if (u == END_POINT) break;
 280:	|        |            004b4783          	lbu	x15,4(x22)
     ### 	return min_index;
 284:	|        |            0ff97a13          	andi	x20,x18,255
     ###         if (u == END_POINT) break;
 288:	|        |            0ff7f793          	andi	x15,x15,255
 28c:	|        |  /-------- 0b478863          	beq	x15,x20,33c <__ram_size+0x23c>
     ###     *n |= 0x20000000 >> *i;
 290:	|        |  |         200007b7          	lui	x15,0x20000
 294:	|        |  |         4127d7b3          	sra	x15,x15,x18
     ###             bool weight = is_node_connected(&path_planned[u],&v);
 298:	|        |  |         00291993          	slli	x19,x18,0x2
     ###     *n |= 0x20000000 >> *i;
 29c:	|        |  |         00f4e4b3          	or	x9,x9,x15
     ###             bool weight = is_node_connected(&path_planned[u],&v);
 2a0:	|        |  |         018989b3          	add	x19,x19,x24
 2a4:	|        |  |         00000b93          	addi	x23,x0,0
     ###     return ((*n >> (29-*i)) & 1);
 2a8:	|        |  |         01d00d93          	addi	x27,x0,29
     ### 		for (uint8_t v = 0; v < V; v++){
 2ac:	|        |  |         01e00d13          	addi	x26,x0,30
     ###         if (((*arr>>(i*8))&0xff) == *n) return 1;
 2b0:	|        |  |  /----> 0009a603          	lw	x12,0(x19)
 2b4:	|        |  |  |      0ffbfa93          	andi	x21,x23,255
 2b8:	|        |  |  |      00000713          	addi	x14,x0,0
 2bc:	|        |  |  |  /-> 00e656b3          	srl	x13,x12,x14
 2c0:	|        |  |  |  |   0ff6f693          	andi	x13,x13,255
 2c4:	|  /-----|--|--|--|-- 10db8863          	beq	x23,x13,3d4 <__ram_size+0x2d4>
     ###     for (uint8_t i = 0; i < 4; i++) {
 2c8:	|  |     |  |  |  |   00870713          	addi	x14,x14,8
 2cc:	|  |     |  |  |  \-- ff9718e3          	bne	x14,x25,2bc <__ram_size+0x1bc>
     ###     return 0;
 2d0:	|  |     |  |  |      00000693          	addi	x13,x0,0
     ###     return ((*n >> (29-*i)) & 1);
 2d4:	|  |  /--|--|--|----> 417d8733          	sub	x14,x27,x23
 2d8:	|  |  |  |  |  |      00e4d733          	srl	x14,x9,x14
 2dc:	|  |  |  |  |  |      00177713          	andi	x14,x14,1
     ###             uint8_t dist_u = array_index(dist,u);
     ### 			if (!bit_position (&visited,&v) && weight   
 2e0:	|  |  |  |  |  |  /-- 04071463          	bne	x14,x0,328 <__ram_size+0x228>
 2e4:	|  |  |  |  |  |  +-- 04068263          	beq	x13,x0,328 <__ram_size+0x228>
     ###             uint8_t dist_u = array_index(dist,u);
 2e8:	|  |  |  |  |  |  |   000a0513          	addi	x10,x20,0
 2ec:	|  |  |  |  |  |  |   138000ef          	jal	x1,424 <array_index.constprop.0>
     ###                                 // if the vertex is not visited (value of current v has never been the value of u) 
     ###                                 //and there is an edge between u and v
     ### 				&& dist_u != INF  
 2f0:	|  |  |  |  |  |  |   00f00793          	addi	x15,x0,15
 2f4:	|  |  |  |  |  |  |   00a12623          	sw	x10,12(x2)
 2f8:	|  |  |  |  |  |  +-- 02f50863          	beq	x10,x15,328 <__ram_size+0x228>
     ###                                 // if the distance of u is not infinity
     ### 				&& dist_u + weight < array_index(dist,v)) 
 2fc:	|  |  |  |  |  |  |   000a8513          	addi	x10,x21,0
 300:	|  |  |  |  |  |  |   124000ef          	jal	x1,424 <array_index.constprop.0>
 304:	|  |  |  |  |  |  |   00c12583          	lw	x11,12(x2)
 308:	|  |  |  |  |  |  |   00158593          	addi	x11,x11,1
 30c:	|  |  |  |  |  |  +-- 00a5de63          	bge	x11,x10,328 <__ram_size+0x228>
     ###                                 // sum of distance to u and edge weight of v-u is 
     ###                                 //less than the distance to v (v is not visited)
     ###                 {
     ###                     array_write(dist,&v,dist_u + weight); //update the distance of v     
 310:	|  |  |  |  |  |  |   0ff5f593          	andi	x11,x11,255
 314:	|  |  |  |  |  |  |   000a8513          	addi	x10,x21,0
 318:	|  |  |  |  |  |  |   148000ef          	jal	x1,460 <array_write.constprop.0.isra.0>
     ###                     array_write8(prev,&v, u); //update the parent of v
 31c:	|  |  |  |  |  |  |   000a0593          	addi	x11,x20,0
 320:	|  |  |  |  |  |  |   000a8513          	addi	x10,x21,0
 324:	|  |  |  |  |  |  |   184000ef          	jal	x1,4a8 <array_write8.constprop.0.isra.0>
     ### 		for (uint8_t v = 0; v < V; v++){
 328:	|  |  |  |  |  |  \-> 001b8b93          	addi	x23,x23,1
 32c:	|  |  |  |  |  \----- f9ab92e3          	bne	x23,x26,2b0 <__ram_size+0x1b0>
     ###     for (uint8_t i = 0; i < V - 1; i++) {
 330:	|  |  |  |  |         fff40413          	addi	x8,x8,-1
 334:	|  |  |  |  |         0ff47413          	andi	x8,x8,255
 338:	|  |  |  \--|-------- f00416e3          	bne	x8,x0,244 <__ram_size+0x144>
     ###                 }}
     ### 	}
     ### 
     ###     // backtracking the path from the destination to the start
     ###     uint8_t currentVertex = END_POINT;
 33c:	|  |  |     \-------> 020007b7          	lui	x15,0x2000
 340:	|  |  |               0047c703          	lbu	x14,4(x15) # 2000004 <__bss_end+0x4>
     ### 
     ###     path_planned[(idx)++] = currentVertex;
     ###     while (currentVertex != START_POINT) {
 344:	|  |  |               020005b7          	lui	x11,0x2000
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 348:	|  |  |               ff000537          	lui	x10,0xff000
     ###     uint8_t currentVertex = END_POINT;
 34c:	|  |  |               0ff77713          	andi	x14,x14,255
     ###     path_planned[(idx)++] = currentVertex;
 350:	|  |  |               02e7a823          	sw	x14,48(x15)
 354:	|  |  |               00100793          	addi	x15,x0,1
     ###     while (currentVertex != START_POINT) {
 358:	|  |  |     /-------> 0005c683          	lbu	x13,0(x11) # 2000000 <__bss_end>
 35c:	|  |  |     |         0ff6f693          	andi	x13,x13,255
 360:	|  |  |     |  /----- 06e69e63          	bne	x13,x14,3dc <__ram_size+0x2dc>
     ###         path_planned[(idx)++]= currentVertex = array_index8(prev,currentVertex);
     ###     }
     ### 
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = --idx; i >=0; i--) {
 364:	|  |  |     |  |      fff78793          	addi	x15,x15,-1
 368:	|  |  |     |  |      0ff7f793          	andi	x15,x15,255
     ###         NODE_POINT = path_planned[i];
 36c:	|  |  |     |  |      02000737          	lui	x14,0x2000
     ###     for (int i = --idx; i >=0; i--) {
 370:	|  |  |     |  |      fff00613          	addi	x12,x0,-1
     ###         NODE_POINT = path_planned[i];
 374:	|  |  |     |  |  /-> 00279693          	slli	x13,x15,0x2
 378:	|  |  |     |  |  |   00d706b3          	add	x13,x14,x13
 37c:	|  |  |     |  |  |   0306c683          	lbu	x13,48(x13)
     ###     for (int i = --idx; i >=0; i--) {
 380:	|  |  |     |  |  |   fff78793          	addi	x15,x15,-1
     ###         NODE_POINT = path_planned[i];
 384:	|  |  |     |  |  |   00d70423          	sb	x13,8(x14) # 2000008 <__bss_end+0x8>
     ###     for (int i = --idx; i >=0; i--) {
 388:	|  |  |     |  |  \-- fec796e3          	bne	x15,x12,374 <__ram_size+0x274>
     ###     }
     ### 
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 38c:	|  |  |     |  |      00100793          	addi	x15,x0,1
 390:	|  |  |     |  |      00f70623          	sb	x15,12(x14)
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 394:	\--|--|-----|--|----> 04c12083          	lw	x1,76(x2)
 398:	   |  |     |  |      04812403          	lw	x8,72(x2)
 39c:	   |  |     |  |      04412483          	lw	x9,68(x2)
 3a0:	   |  |     |  |      04012903          	lw	x18,64(x2)
 3a4:	   |  |     |  |      03c12983          	lw	x19,60(x2)
 3a8:	   |  |     |  |      03812a03          	lw	x20,56(x2)
 3ac:	   |  |     |  |      03412a83          	lw	x21,52(x2)
 3b0:	   |  |     |  |      03012b03          	lw	x22,48(x2)
 3b4:	   |  |     |  |      02c12b83          	lw	x23,44(x2)
 3b8:	   |  |     |  |      02812c03          	lw	x24,40(x2)
 3bc:	   |  |     |  |      02412c83          	lw	x25,36(x2)
 3c0:	   |  |     |  |      02012d03          	lw	x26,32(x2)
 3c4:	   |  |     |  |      01c12d83          	lw	x27,28(x2)
 3c8:	   |  |     |  |      00000513          	addi	x10,x0,0
 3cc:	   |  |     |  |      05010113          	addi	x2,x2,80
 3d0:	   |  |     |  |      00008067          	jalr	x0,0(x1)
     ###         if (((*arr>>(i*8))&0xff) == *n) return 1;
 3d4:	   \--|-----|--|----> 00100693          	addi	x13,x0,1
 3d8:	      \-----|--|----- efdff06f          	jal	x0,2d4 <__ram_size+0x1d4>
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 3dc:	            |  \----> 00377613          	andi	x12,x14,3
 3e0:	            |         0fc77713          	andi	x14,x14,252
 3e4:	            |         00e58733          	add	x14,x11,x14
 3e8:	            |         01072703          	lw	x14,16(x14)
 3ec:	            |         00361693          	slli	x13,x12,0x3
 3f0:	            |         00d556b3          	srl	x13,x10,x13
 3f4:	            |         fff64613          	xori	x12,x12,-1
 3f8:	            |         00e6f6b3          	and	x13,x13,x14
 3fc:	            |         00361613          	slli	x12,x12,0x3
 400:	            |         00c6d6b3          	srl	x13,x13,x12
     ###         path_planned[(idx)++]= currentVertex = array_index8(prev,currentVertex);
 404:	            |         00178613          	addi	x12,x15,1
 408:	            |         00279793          	slli	x15,x15,0x2
 40c:	            |         00f587b3          	add	x15,x11,x15
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 410:	            |         0ff6f713          	andi	x14,x13,255
     ###         path_planned[(idx)++]= currentVertex = array_index8(prev,currentVertex);
 414:	            |         0ff6f693          	andi	x13,x13,255
 418:	            |         02d7a823          	sw	x13,48(x15)
 41c:	            |         0ff67793          	andi	x15,x12,255
 420:	            \-------- f39ff06f          	jal	x0,358 <__ram_size+0x258>

00000424 <array_index.constprop.0>:
     ###     return (arr[(n & 0xf8)>>3]&(0XF0000000>>((n&0x7)*4)))>>(~(n&0x7)*4); 
 424:	00757793          	andi	x15,x10,7
 428:	00355513          	srli	x10,x10,0x3
 42c:	00251513          	slli	x10,x10,0x2
 430:	02000737          	lui	x14,0x2000
 434:	00a70733          	add	x14,x14,x10
 438:	0a872703          	lw	x14,168(x14) # 20000a8 <__bss_end+0xa8>
 43c:	00279693          	slli	x13,x15,0x2
 440:	f0000537          	lui	x10,0xf0000
 444:	00d55533          	srl	x10,x10,x13
 448:	fff7c793          	xori	x15,x15,-1
 44c:	00e57533          	and	x10,x10,x14
 450:	00279793          	slli	x15,x15,0x2
 454:	00f55533          	srl	x10,x10,x15
     ### } 
 458:	0ff57513          	andi	x10,x10,255
 45c:	00008067          	jalr	x0,0(x1)

00000460 <array_write.constprop.0.isra.0>:
     ###     arr[(*n & 0xf8)>>3] = (arr[(*n & 0xf8)>>3]&~(0XF0000000>>((*n&0x7)*4))) | (val << (~(*n&0x7)*4));
 460:	00355713          	srli	x14,x10,0x3
 464:	020007b7          	lui	x15,0x2000
 468:	0a878793          	addi	x15,x15,168 # 20000a8 <__bss_end+0xa8>
 46c:	00757513          	andi	x10,x10,7
 470:	00271713          	slli	x14,x14,0x2
 474:	00f70733          	add	x14,x14,x15
 478:	00251693          	slli	x13,x10,0x2
 47c:	f00007b7          	lui	x15,0xf0000
 480:	00d7d7b3          	srl	x15,x15,x13
 484:	00072683          	lw	x13,0(x14)
 488:	fff54513          	xori	x10,x10,-1
 48c:	fff7c793          	xori	x15,x15,-1
 490:	00251513          	slli	x10,x10,0x2
 494:	00d7f7b3          	and	x15,x15,x13
 498:	00a59533          	sll	x10,x11,x10
 49c:	00a7e7b3          	or	x15,x15,x10
 4a0:	00f72023          	sw	x15,0(x14)
     ### }
 4a4:	00008067          	jalr	x0,0(x1)

000004a8 <array_write8.constprop.0.isra.0>:
     ###     arr[(*n & 0xfc)>>2] = (arr[(*n & 0xfc)>>2]&~(0XFF000000>>((*n&0x3)*8))) | (val << (~(*n&0x3)*8));
 4a8:	020007b7          	lui	x15,0x2000
 4ac:	0fc57713          	andi	x14,x10,252
 4b0:	01078793          	addi	x15,x15,16 # 2000010 <__bss_end+0x10>
 4b4:	00357513          	andi	x10,x10,3
 4b8:	00f70733          	add	x14,x14,x15
 4bc:	00351693          	slli	x13,x10,0x3
 4c0:	ff0007b7          	lui	x15,0xff000
 4c4:	00d7d7b3          	srl	x15,x15,x13
 4c8:	00072683          	lw	x13,0(x14)
 4cc:	fff54513          	xori	x10,x10,-1
 4d0:	fff7c793          	xori	x15,x15,-1
 4d4:	00351513          	slli	x10,x10,0x3
 4d8:	00d7f7b3          	and	x15,x15,x13
 4dc:	00a59533          	sll	x10,x11,x10
 4e0:	00a7e7b3          	or	x15,x15,x10
 4e4:	00f72023          	sw	x15,0(x14)
     ### }
 4e8:	00008067          	jalr	x0,0(x1)

000004ec <_set_tls>:
 4ec:	00050213          	addi	x4,x10,0
 4f0:	00008067          	jalr	x0,0(x1)

000004f4 <memcpy>:
 4f4:	       00050313          	addi	x6,x10,0
 4f8:	/----- 00060e63          	beq	x12,x0,514 <memcpy+0x20>
 4fc:	|  /-> 00058383          	lb	x7,0(x11)
 500:	|  |   00730023          	sb	x7,0(x6)
 504:	|  |   fff60613          	addi	x12,x12,-1
 508:	|  |   00130313          	addi	x6,x6,1
 50c:	|  |   00158593          	addi	x11,x11,1
 510:	|  \-- fe0616e3          	bne	x12,x0,4fc <memcpy+0x8>
 514:	\----> 00008067          	jalr	x0,0(x1)

00000518 <memset>:
 518:	       00050313          	addi	x6,x10,0
 51c:	/----- 00060a63          	beq	x12,x0,530 <memset+0x18>
 520:	|  /-> 00b30023          	sb	x11,0(x6)
 524:	|  |   fff60613          	addi	x12,x12,-1
 528:	|  |   00130313          	addi	x6,x6,1
 52c:	|  \-- fe061ae3          	bne	x12,x0,520 <memset+0x8>
 530:	\----> 00008067          	jalr	x0,0(x1)

00000534 <__text_end>:
 534:	0000                	c.unimp
	...
