
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
0000051c l     F .text	0000003c array_index.constprop.0
00000558 l     F .text	00000048 array_write.constprop.0.isra.0
000005a0 l     F .text	0000003c array_write8.isra.0
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
000004aa l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000005e4 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
000005dc g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000624 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000608 g     F .text	0000001c memset
00000054 g     F .text	000004c8 main
00000100 g       *ABS*	00000000 __ram_size
000004aa  w      .debug_info	00000000 .hidden t1b_path_planner.c.375373cc
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000628 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    62800593          	addi	x11,x0,1576
  1c:	    00000613          	addi	x12,x0,0
  20:	    5c4000ef          	jal	x1,5e4 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    5d4000ef          	jal	x1,608 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    59c000ef          	jal	x1,5dc <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     return 0xff;   
     ### }
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                         fb010113          	addi	x2,x2,-80
  58:	                         04912223          	sw	x9,68(x2)
  5c:	                         04112623          	sw	x1,76(x2)
  60:	                         04812423          	sw	x8,72(x2)
  64:	                         05212023          	sw	x18,64(x2)
  68:	                         03312e23          	sw	x19,60(x2)
  6c:	                         03412c23          	sw	x20,56(x2)
  70:	                         03512a23          	sw	x21,52(x2)
  74:	                         03612823          	sw	x22,48(x2)
  78:	                         03712623          	sw	x23,44(x2)
  7c:	                         03812423          	sw	x24,40(x2)
  80:	                         03912223          	sw	x25,36(x2)
  84:	                         03a12023          	sw	x26,32(x2)
  88:	                         01b12e23          	sw	x27,28(x2)
     ###     uint8_t idx = 0;
     ### 
     ### 
     ###     
     ###     // check if the start and end points are valid
     ###     if(!(30>START_POINT && START_POINT>=0 && 30>END_POINT && END_POINT>=0)) return 0;
  8c:	                         020004b7          	lui	x9,0x2000
  90:	                         0004c783          	lbu	x15,0(x9) # 2000000 <__bss_end>
  94:	                         01d00713          	addi	x14,x0,29
  98:	                         0ff7f793          	andi	x15,x15,255
  9c:	/----------------------- 30f76e63          	bltu	x14,x15,3b8 <__ram_size+0x2b8>
  a0:	|                        0004c783          	lbu	x15,0(x9)
  a4:	|                        0044c783          	lbu	x15,4(x9)
  a8:	|                        0ff7f793          	andi	x15,x15,255
  ac:	+----------------------- 30f76663          	bltu	x14,x15,3b8 <__ram_size+0x2b8>
  b0:	|                        0044c783          	lbu	x15,4(x9)
     ###     for (uint8_t i = 0; i < 4; i++) {
     ###         dist[i] = 0xffffffff;
     ###     }
     ### 
     ###     // initialize the distance of the start vertex to 0
     ###     array_write(dist, &START_POINT, 0);
  b4:	|                        00000593          	addi	x11,x0,0
     ###     path_planned [0] = 0x01ffffff;
  b8:	|                        fff48793          	addi	x15,x9,-1
  bc:	|                        02f4a823          	sw	x15,48(x9)
     ###     path_planned [1] = 0x001dff02;
  c0:	|                        001e07b7          	lui	x15,0x1e0
  c4:	|                        f0278793          	addi	x15,x15,-254 # 1dff02 <__flash_size+0x1df702>
  c8:	|                        02f4aa23          	sw	x15,52(x9)
     ###     path_planned [2] = 0x0108ff03;
  cc:	|                        010907b7          	lui	x15,0x1090
  d0:	|                        f0378793          	addi	x15,x15,-253 # 108ff03 <__flash_size+0x108f703>
  d4:	|                        02f4ac23          	sw	x15,56(x9)
     ###     path_planned [3] = 0x02ff041c;
  d8:	|                        02ff07b7          	lui	x15,0x2ff0
  dc:	|                        41c78793          	addi	x15,x15,1052 # 2ff041c <__global_pointer$+0xfefc1c>
  e0:	|                        02f4ae23          	sw	x15,60(x9)
     ###     path_planned [4] = 0x030506ff;
  e4:	|                        030507b7          	lui	x15,0x3050
  e8:	|                        6ff78793          	addi	x15,x15,1791 # 30506ff <__global_pointer$+0x104feff>
  ec:	|                        04f4a023          	sw	x15,64(x9)
     ###     path_planned [5] = 0x04ffffff;
  f0:	|                        050007b7          	lui	x15,0x5000
  f4:	|                        fff78793          	addi	x15,x15,-1 # 4ffffff <__global_pointer$+0x2fff7ff>
  f8:	|                        04f4a223          	sw	x15,68(x9)
     ###     path_planned [6] = 0x04ff07ff;
  fc:	|                        04ff07b7          	lui	x15,0x4ff0
 100:	|                        7ff78793          	addi	x15,x15,2047 # 4ff07ff <__global_pointer$+0x2feffff>
 104:	|                        04f4a423          	sw	x15,72(x9)
     ###     path_planned [7] = 0x08ff06ff;
 108:	|                        08ff07b7          	lui	x15,0x8ff0
 10c:	|                        6ff78793          	addi	x15,x15,1791 # 8ff06ff <__global_pointer$+0x6fefeff>
 110:	|                        04f4a623          	sw	x15,76(x9)
     ###     path_planned [8] = 0x0702090c;
 114:	|                        070217b7          	lui	x15,0x7021
 118:	|                        90c78793          	addi	x15,x15,-1780 # 702090c <__global_pointer$+0x502010c>
 11c:	|                        04f4a823          	sw	x15,80(x9)
     ###     path_planned [9] = 0x080aff0b;
 120:	|                        080b07b7          	lui	x15,0x80b0
 124:	|                        f0b78793          	addi	x15,x15,-245 # 80aff0b <__global_pointer$+0x60af70b>
 128:	|                        04f4aa23          	sw	x15,84(x9)
     ###     path_planned [10] = 0x09ffffff;
 12c:	|                        0a0007b7          	lui	x15,0xa000
 130:	|                        fff78793          	addi	x15,x15,-1 # 9ffffff <__global_pointer$+0x7fff7ff>
 134:	|                        04f4ac23          	sw	x15,88(x9)
     ###     path_planned [11] = 0x09ffffff;
 138:	|                        04f4ae23          	sw	x15,92(x9)
     ###     path_planned [12] = 0x0813ff0d;
 13c:	|                        081407b7          	lui	x15,0x8140
 140:	|                        f0d78793          	addi	x15,x15,-243 # 813ff0d <__global_pointer$+0x613f70d>
 144:	|                        06f4a023          	sw	x15,96(x9)
     ###     path_planned [13] = 0x0eff0cff;
 148:	|                        0eff17b7          	lui	x15,0xeff1
 14c:	|                        cff78793          	addi	x15,x15,-769 # eff0cff <__global_pointer$+0xcff04ff>
 150:	|                        06f4a223          	sw	x15,100(x9)
     ###     path_planned [14] = 0x0d0f10ff;
 154:	|                        0d0f17b7          	lui	x15,0xd0f1
 158:	|                        0ff78793          	addi	x15,x15,255 # d0f10ff <__global_pointer$+0xb0f08ff>
 15c:	|                        06f4a423          	sw	x15,104(x9)
     ###     path_planned [15] = 0x0effffff;
 160:	|                        0f0007b7          	lui	x15,0xf000
 164:	|                        fff78793          	addi	x15,x15,-1 # effffff <__global_pointer$+0xcfff7ff>
 168:	|                        06f4a623          	sw	x15,108(x9)
     ###     path_planned [16] = 0x0e1112ff;
 16c:	|                        0e1117b7          	lui	x15,0xe111
 170:	|                        2ff78793          	addi	x15,x15,767 # e1112ff <__global_pointer$+0xc110aff>
 174:	|                        06f4a823          	sw	x15,112(x9)
     ###     path_planned [17] = 0x10ffffff;
 178:	|                        110007b7          	lui	x15,0x11000
 17c:	|                        fff78793          	addi	x15,x15,-1 # 10ffffff <__global_pointer$+0xefff7ff>
 180:	|                        06f4aa23          	sw	x15,116(x9)
     ###     path_planned [18] = 0x13ff10ff;
 184:	|                        13ff17b7          	lui	x15,0x13ff1
 188:	|                        0ff78793          	addi	x15,x15,255 # 13ff10ff <__global_pointer$+0x11ff08ff>
 18c:	|                        06f4ac23          	sw	x15,120(x9)
     ###     path_planned [19] = 0x12ff0c14;
 190:	|                        12ff17b7          	lui	x15,0x12ff1
 194:	|                        c1478793          	addi	x15,x15,-1004 # 12ff0c14 <__global_pointer$+0x10ff0414>
 198:	|                        06f4ae23          	sw	x15,124(x9)
     ###     path_planned [20] = 0x13151d18;
 19c:	|                        131527b7          	lui	x15,0x13152
 1a0:	|                        d1878793          	addi	x15,x15,-744 # 13151d18 <__global_pointer$+0x11151518>
 1a4:	|                        08f4a023          	sw	x15,128(x9)
     ###     path_planned [21] = 0x1417ff16;
 1a8:	|                        141807b7          	lui	x15,0x14180
 1ac:	|                        f1678793          	addi	x15,x15,-234 # 1417ff16 <__global_pointer$+0x1217f716>
 1b0:	|                        08f4a223          	sw	x15,132(x9)
     ###     path_planned [22] = 0x15ffffff;
 1b4:	|                        160007b7          	lui	x15,0x16000
 1b8:	|                        fff78793          	addi	x15,x15,-1 # 15ffffff <__global_pointer$+0x13fff7ff>
 1bc:	|                        08f4a423          	sw	x15,136(x9)
     ###     path_planned [23] = 0x15ffffff;
 1c0:	|                        08f4a623          	sw	x15,140(x9)
     ###     path_planned [24] = 0x19ff14ff;
 1c4:	|                        19ff17b7          	lui	x15,0x19ff1
 1c8:	|                        4ff78793          	addi	x15,x15,1279 # 19ff14ff <__global_pointer$+0x17ff0cff>
 1cc:	|                        08f4a823          	sw	x15,144(x9)
     ###     path_planned [25] = 0x1aff18ff;
 1d0:	|                        1aff27b7          	lui	x15,0x1aff2
 1d4:	|                        8ff78713          	addi	x14,x15,-1793 # 1aff18ff <__global_pointer$+0x18ff10ff>
 1d8:	|                        08e4aa23          	sw	x14,148(x9)
     ###     path_planned [28] = 0x1aff1d03;
 1dc:	|                        d0378793          	addi	x15,x15,-765
     ###     path_planned [26] = 0x191b1cff;
 1e0:	|                        191b2737          	lui	x14,0x191b2
     ###     path_planned [28] = 0x1aff1d03;
 1e4:	|                        0af4a023          	sw	x15,160(x9)
     ###     path_planned [26] = 0x191b1cff;
 1e8:	|                        cff70713          	addi	x14,x14,-769 # 191b1cff <__global_pointer$+0x171b14ff>
     ###     path_planned [29] = 0x1cff1401;
 1ec:	|                        1cff17b7          	lui	x15,0x1cff1
     ###     path_planned [26] = 0x191b1cff;
 1f0:	|                        08e4ac23          	sw	x14,152(x9)
     ###     path_planned [29] = 0x1cff1401;
 1f4:	|                        40178793          	addi	x15,x15,1025 # 1cff1401 <__global_pointer$+0x1aff0c01>
     ###     path_planned [27] = 0x1affffff;
 1f8:	|                        1b000737          	lui	x14,0x1b000
 1fc:	|                        fff70713          	addi	x14,x14,-1 # 1affffff <__global_pointer$+0x18fff7ff>
     ###     path_planned [29] = 0x1cff1401;
 200:	|                        0af4a223          	sw	x15,164(x9)
     ###         dist[i] = 0xffffffff;
 204:	|                        fff00793          	addi	x15,x0,-1
     ###     path_planned [27] = 0x1affffff;
 208:	|                        08e4ae23          	sw	x14,156(x9)
     ###         dist[i] = 0xffffffff;
 20c:	|                        0af4a423          	sw	x15,168(x9)
 210:	|                        0af4a623          	sw	x15,172(x9)
     ###     array_write(dist, &START_POINT, 0);
 214:	|                        0004c503          	lbu	x10,0(x9)
     ###         dist[i] = 0xffffffff;
 218:	|                        0af4a823          	sw	x15,176(x9)
 21c:	|                        0af4aa23          	sw	x15,180(x9)
     ###     array_write(dist, &START_POINT, 0);
 220:	|                        338000ef          	jal	x1,558 <array_write.constprop.0.isra.0>
     ###     // initialize the parent of the start vertex to 0xff
     ###     array_write8(prev, &START_POINT, 0xff);
 224:	|                        0004c583          	lbu	x11,0(x9)
 228:	|                        01048513          	addi	x10,x9,16
 22c:	|                        0ff00613          	addi	x12,x0,255
     ###     for (uint8_t i = 0; i < V - 1; i++) {
     ###         // pick the vertex with the minimum distance from the set of unvisited vertices
     ### 		uint8_t u = minDistance(dist, &visited);
     ### 
     ###         //break if the destination is reached
     ###         if (u == END_POINT) break;
 230:	|                        02000a37          	lui	x20,0x2000
     ###     array_write8(prev, &START_POINT, 0xff);
 234:	|                        36c000ef          	jal	x1,5a0 <array_write8.isra.0>
 238:	|                        01d00493          	addi	x9,x0,29
     ###     uint32_t visited = 0x0; // visited vertices represented as a bit vector
 23c:	|                        00000913          	addi	x18,x0,0
     ### 				&& dist_u + weight < array_index(dist,v)) 
     ###                                 // sum of distance to u and edge weight of v-u is 
     ###                                 //less than the distance to v (v is not visited)
     ###                 {
     ###                     array_write(dist,&v,dist_u + weight); //update the distance of v     
     ###                     array_write8(prev,&v, u); //update the parent of v
 240:	|                        010a0c93          	addi	x25,x20,16 # 2000010 <__bss_end+0x10>
     ### int main(int argc, char const *argv[]) {
 244:	|           /----------> 00000a93          	addi	x21,x0,0
     ### 	int min = INF, min_index;
 248:	|           |            00f00b13          	addi	x22,x0,15
     ###     return ((*n >> (29-*i)) & 1);
 24c:	|           |            01d00d13          	addi	x26,x0,29
     ### 	for (uint8_t v = 0; v < V; v++)
 250:	|           |            01e00b93          	addi	x23,x0,30
     ###     return ((*n >> (29-*i)) & 1);
 254:	|           |     /----> 415d07b3          	sub	x15,x26,x21
 258:	|           |     |      00f957b3          	srl	x15,x18,x15
 25c:	|           |     |      0017f793          	andi	x15,x15,1
 260:	|           |     |      0ffaf513          	andi	x10,x21,255
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 264:	|           |     |  /-- 00079a63          	bne	x15,x0,278 <__ram_size+0x178>
 268:	|           |     |  |   2b4000ef          	jal	x1,51c <array_index.constprop.0>
 26c:	|           |     |  +-- 00ab4663          	blt	x22,x10,278 <__ram_size+0x178>
     ### 			min = array_index (dist,v), min_index = v;
 270:	|           |     |  |   000a8993          	addi	x19,x21,0
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 274:	|           |     |  |   00050b13          	addi	x22,x10,0
     ### 	for (uint8_t v = 0; v < V; v++)
 278:	|           |     |  \-> 001a8a93          	addi	x21,x21,1
 27c:	|           |     \----- fd7a9ce3          	bne	x21,x23,254 <__ram_size+0x154>
     ###         if (u == END_POINT) break;
 280:	|           |            004a4783          	lbu	x15,4(x20)
     ### 	return min_index;
 284:	|           |            0ff9fb13          	andi	x22,x19,255
     ###         if (u == END_POINT) break;
 288:	|           |            0ff7f793          	andi	x15,x15,255
 28c:	|           |  /-------- 0d678063          	beq	x15,x22,34c <__ram_size+0x24c>
     ###     *n |= 0x20000000 >> *i;
 290:	|           |  |         200007b7          	lui	x15,0x20000
 294:	|           |  |         4137d7b3          	sra	x15,x15,x19
 298:	|           |  |         00f96933          	or	x18,x18,x15
     ###             bool weight = is_node_connected(&path_planned[u],&v);
 29c:	|           |  |         020007b7          	lui	x15,0x2000
 2a0:	|           |  |         00299a93          	slli	x21,x19,0x2
 2a4:	|           |  |         03078793          	addi	x15,x15,48 # 2000030 <__bss_end+0x30>
 2a8:	|           |  |         00fa8ab3          	add	x21,x21,x15
 2ac:	|           |  |         00000c13          	addi	x24,x0,0
     ###     return ((*n >> (29-*i)) & 1);
 2b0:	|           |  |         01d00d13          	addi	x26,x0,29
     ### 				&& dist_u != INF  
 2b4:	|           |  |         00f00d93          	addi	x27,x0,15
     ###         if (((*arr>>(i*8))&0xff) == *n) return 1;
 2b8:	|           |  |  /----> 000aa603          	lw	x12,0(x21)
 2bc:	|           |  |  |      0ffc7b93          	andi	x23,x24,255
 2c0:	|           |  |  |      00000713          	addi	x14,x0,0
 2c4:	|           |  |  |  /-> 00e656b3          	srl	x13,x12,x14
 2c8:	|           |  |  |  |   0ff6f693          	andi	x13,x13,255
 2cc:	|     /-----|--|--|--|-- 12dc0663          	beq	x24,x13,3f8 <__ram_size+0x2f8>
     ###     for (uint8_t i = 0; i < 4; i++) {
 2d0:	|     |     |  |  |  |   00870713          	addi	x14,x14,8
 2d4:	|     |     |  |  |  |   02000793          	addi	x15,x0,32
 2d8:	|     |     |  |  |  \-- fef716e3          	bne	x14,x15,2c4 <__ram_size+0x1c4>
     ###     return 0;
 2dc:	|     |     |  |  |      00000693          	addi	x13,x0,0
     ###     return ((*n >> (29-*i)) & 1);
 2e0:	|     |  /--|--|--|----> 418d0733          	sub	x14,x26,x24
 2e4:	|     |  |  |  |  |      00e95733          	srl	x14,x18,x14
 2e8:	|     |  |  |  |  |      00177713          	andi	x14,x14,1
     ### 			if (!bit_position (&visited,&v) && weight   
 2ec:	|     |  |  |  |  |  /-- 04071463          	bne	x14,x0,334 <__ram_size+0x234>
 2f0:	|     |  |  |  |  |  +-- 04068263          	beq	x13,x0,334 <__ram_size+0x234>
     ###             uint8_t dist_u = array_index(dist,u);
 2f4:	|     |  |  |  |  |  |   000b0513          	addi	x10,x22,0
 2f8:	|     |  |  |  |  |  |   224000ef          	jal	x1,51c <array_index.constprop.0>
     ### 				&& dist_u != INF  
 2fc:	|     |  |  |  |  |  |   00a12623          	sw	x10,12(x2)
 300:	|     |  |  |  |  |  +-- 03b50a63          	beq	x10,x27,334 <__ram_size+0x234>
     ### 				&& dist_u + weight < array_index(dist,v)) 
 304:	|     |  |  |  |  |  |   000b8513          	addi	x10,x23,0
 308:	|     |  |  |  |  |  |   214000ef          	jal	x1,51c <array_index.constprop.0>
 30c:	|     |  |  |  |  |  |   00c12583          	lw	x11,12(x2)
 310:	|     |  |  |  |  |  |   00158593          	addi	x11,x11,1
 314:	|     |  |  |  |  |  +-- 02a5d063          	bge	x11,x10,334 <__ram_size+0x234>
     ###                     array_write(dist,&v,dist_u + weight); //update the distance of v     
 318:	|     |  |  |  |  |  |   0ff5f593          	andi	x11,x11,255
 31c:	|     |  |  |  |  |  |   000b8513          	addi	x10,x23,0
 320:	|     |  |  |  |  |  |   238000ef          	jal	x1,558 <array_write.constprop.0.isra.0>
     ###                     array_write8(prev,&v, u); //update the parent of v
 324:	|     |  |  |  |  |  |   000b0613          	addi	x12,x22,0
 328:	|     |  |  |  |  |  |   000b8593          	addi	x11,x23,0
 32c:	|     |  |  |  |  |  |   000c8513          	addi	x10,x25,0
 330:	|     |  |  |  |  |  |   270000ef          	jal	x1,5a0 <array_write8.isra.0>
     ### 		for (uint8_t v = 0; v < V; v++){
 334:	|     |  |  |  |  |  \-> 001c0c13          	addi	x24,x24,1
 338:	|     |  |  |  |  |      01e00713          	addi	x14,x0,30
 33c:	|     |  |  |  |  \----- f6ec1ee3          	bne	x24,x14,2b8 <__ram_size+0x1b8>
     ###     for (uint8_t i = 0; i < V - 1; i++) {
 340:	|     |  |  |  |         fff48493          	addi	x9,x9,-1
 344:	|     |  |  |  |         0ff4f493          	andi	x9,x9,255
 348:	|     |  |  \--|-------- ee049ee3          	bne	x9,x0,244 <__ram_size+0x144>
     ###                 }}
     ### 	}
     ### 
     ###     // backtracking the path from the destination to the start
     ###     uint8_t current_vertex = END_POINT;
 34c:	|     |  |     \-------> 02000537          	lui	x10,0x2000
 350:	|     |  |               00454483          	lbu	x9,4(x10) # 2000004 <__bss_end+0x4>
     ###     array_write8(dist,&idx,END_POINT);
 354:	|     |  |               00454603          	lbu	x12,4(x10)
 358:	|     |  |               00000593          	addi	x11,x0,0
 35c:	|     |  |               0a850513          	addi	x10,x10,168
 360:	|     |  |               0ff67613          	andi	x12,x12,255
     ###     // path_planned[(idx)++] = current_vertex;
     ###     while (current_vertex != START_POINT) {
 364:	|     |  |               020009b7          	lui	x19,0x2000
     ###     uint8_t current_vertex = END_POINT;
 368:	|     |  |               0ff4f493          	andi	x9,x9,255
     ###     array_write8(dist,&idx,END_POINT);
 36c:	|     |  |               234000ef          	jal	x1,5a0 <array_write8.isra.0>
     ###     uint8_t idx = 0;
 370:	|     |  |               00000913          	addi	x18,x0,0
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 374:	|     |  |               ff000a37          	lui	x20,0xff000
     ###         idx++;
     ###         current_vertex = array_index8(prev,current_vertex);
     ###         array_write8(dist,&idx,current_vertex);
 378:	|     |  |               0a898a93          	addi	x21,x19,168 # 20000a8 <__bss_end+0xa8>
     ###     while (current_vertex != START_POINT) {
 37c:	|     |  |     /-------> 0009c783          	lbu	x15,0(x19)
 380:	|     |  |     |         0ff7f793          	andi	x15,x15,255
 384:	|     |  |     |     /-- 06979e63          	bne	x15,x9,400 <__ram_size+0x300>
     ###         // path_planned[(idx)]= current_vertex = array_index8(prev,current_vertex);
     ###     }
     ### 
     ###     CPU_DONE = 2;
 388:	|     |  |     |     |   00200793          	addi	x15,x0,2
 38c:	|     |  |     |     |   00f98623          	sb	x15,12(x19)
     ###     uint32_t prev_node;
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = idx -1; i >=0; i--) {
 390:	|     |  |     |     |   fff90593          	addi	x11,x18,-1
 394:	|     |  |     |     |   fff00813          	addi	x16,x0,-1
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 398:	|     |  |     |     |   02000637          	lui	x12,0x2000
 39c:	|     |  |     |     |   ff0008b7          	lui	x17,0xff000
     ###         NODE_POINT =// path_planned[i];
     ###         array_index8(dist,i);
     ###         if (CPU_DONE == 2) {
 3a0:	|     |  |     |     |   00200313          	addi	x6,x0,2
     ###             for (uint8_t j = 1; j < 4; j++){
 3a4:	|     |  |     |     |   00400513          	addi	x10,x0,4
     ###     for (int i = idx -1; i >=0; i--) {
 3a8:	|  /--|--|-----|--/--|-X 0b059063          	bne	x11,x16,448 <__ram_size+0x348>
     ###         current_vertex = NODE_POINT;
     ###         prev_node = current_vertex;
     ###     }
     ### 
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 3ac:	|  |  |  |     |  |  |   020007b7          	lui	x15,0x2000
 3b0:	|  |  |  |     |  |  |   00100713          	addi	x14,x0,1
 3b4:	|  |  |  |     |  |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 3b8:	\--|--|--|-----|--|--|-> 04c12083          	lw	x1,76(x2)
 3bc:	   |  |  |     |  |  |   04812403          	lw	x8,72(x2)
 3c0:	   |  |  |     |  |  |   04412483          	lw	x9,68(x2)
 3c4:	   |  |  |     |  |  |   04012903          	lw	x18,64(x2)
 3c8:	   |  |  |     |  |  |   03c12983          	lw	x19,60(x2)
 3cc:	   |  |  |     |  |  |   03812a03          	lw	x20,56(x2)
 3d0:	   |  |  |     |  |  |   03412a83          	lw	x21,52(x2)
 3d4:	   |  |  |     |  |  |   03012b03          	lw	x22,48(x2)
 3d8:	   |  |  |     |  |  |   02c12b83          	lw	x23,44(x2)
 3dc:	   |  |  |     |  |  |   02812c03          	lw	x24,40(x2)
 3e0:	   |  |  |     |  |  |   02412c83          	lw	x25,36(x2)
 3e4:	   |  |  |     |  |  |   02012d03          	lw	x26,32(x2)
 3e8:	   |  |  |     |  |  |   01c12d83          	lw	x27,28(x2)
 3ec:	   |  |  |     |  |  |   00000513          	addi	x10,x0,0
 3f0:	   |  |  |     |  |  |   05010113          	addi	x2,x2,80
 3f4:	   |  |  |     |  |  |   00008067          	jalr	x0,0(x1)
     ###         if (((*arr>>(i*8))&0xff) == *n) return 1;
 3f8:	   |  \--|-----|--|--|-> 00100693          	addi	x13,x0,1
 3fc:	   |     \-----|--|--|-- ee5ff06f          	jal	x0,2e0 <__ram_size+0x1e0>
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 400:	   |           |  |  \-> 0034f793          	andi	x15,x9,3
 404:	   |           |  |      0fc4f493          	andi	x9,x9,252
 408:	   |           |  |      00998733          	add	x14,x19,x9
 40c:	   |           |  |      01072703          	lw	x14,16(x14)
 410:	   |           |  |      00379493          	slli	x9,x15,0x3
 414:	   |           |  |      009a54b3          	srl	x9,x20,x9
 418:	   |           |  |      fff7c793          	xori	x15,x15,-1
 41c:	   |           |  |      00e4f4b3          	and	x9,x9,x14
 420:	   |           |  |      00379793          	slli	x15,x15,0x3
     ###         idx++;
 424:	   |           |  |      00190593          	addi	x11,x18,1
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 428:	   |           |  |      00f4d4b3          	srl	x9,x9,x15
     ###         idx++;
 42c:	   |           |  |      0ff5f913          	andi	x18,x11,255
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 430:	   |           |  |      0ff4f493          	andi	x9,x9,255
     ###         array_write8(dist,&idx,current_vertex);
 434:	   |           |  |      00048613          	addi	x12,x9,0
 438:	   |           |  |      00090593          	addi	x11,x18,0
 43c:	   |           |  |      000a8513          	addi	x10,x21,0
 440:	   |           |  |      160000ef          	jal	x1,5a0 <array_write8.isra.0>
 444:	   |           \--|----- f39ff06f          	jal	x0,37c <__ram_size+0x27c>
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 448:	   |              \----> 0fc5f693          	andi	x13,x11,252
 44c:	   |                     00d606b3          	add	x13,x12,x13
 450:	   |                     0a86a683          	lw	x13,168(x13)
 454:	   |                     0035f713          	andi	x14,x11,3
 458:	   |                     00371793          	slli	x15,x14,0x3
 45c:	   |                     00f8d7b3          	srl	x15,x17,x15
 460:	   |                     fff74713          	xori	x14,x14,-1
 464:	   |                     00d7f7b3          	and	x15,x15,x13
 468:	   |                     00371713          	slli	x14,x14,0x3
 46c:	   |                     00e7d7b3          	srl	x15,x15,x14
 470:	   |                     0ff7f793          	andi	x15,x15,255
     ###         NODE_POINT =// path_planned[i];
 474:	   |                     00f60423          	sb	x15,8(x12) # 2000008 <__bss_end+0x8>
     ###         if (CPU_DONE == 2) {
 478:	   |                     00c64783          	lbu	x15,12(x12)
 47c:	   |                     0ff7f793          	andi	x15,x15,255
 480:	   |                 /-- 00679863          	bne	x15,x6,490 <__ram_size+0x390>
     ###             prev_node = END_POINT;
 484:	   |                 |   00464403          	lbu	x8,4(x12)
     ###             CPU_DONE = 0;
 488:	   |                 |   00060623          	sb	x0,12(x12)
     ###             prev_node = END_POINT;
 48c:	   |                 |   0ff47413          	andi	x8,x8,255
     ###     if (*prev_node == *next_node)
 490:	   |                 \-> 00864e83          	lbu	x29,8(x12)
 494:	   |                     0ff47713          	andi	x14,x8,255
     ###         return 0b10;
 498:	   |                     00200793          	addi	x15,x0,2
     ###     if (*prev_node == *next_node)
 49c:	   |     /-------------- 05d70663          	beq	x14,x29,4e8 <t1b_path_planner.c.375373cc+0x3e>
     ###         if (((array[*current_vertex]>>(i*8))&0xff) == *next_node) {
 4a0:	   |     |               00249493          	slli	x9,x9,0x2
 4a4:	   |     |               009604b3          	add	x9,x12,x9
 4a8:	   |     |               0304af03          	lw	x30,48(x9)
 4ac:	   |     |               00000e13          	addi	x28,x0,0
 4b0:	   |     |  /----------> 003e1793          	slli	x15,x28,0x3
 4b4:	   |     |  |            00ff57b3          	srl	x15,x30,x15
 4b8:	   |     |  |            0ff7f793          	andi	x15,x15,255
 4bc:	   |     |  |            0ffe7713          	andi	x14,x28,255
 4c0:	   |     |  |  /-------- 05d79663          	bne	x15,x29,50c <t1b_path_planner.c.375373cc+0x62>
     ###             for (uint8_t j = 1; j < 4; j++){
 4c4:	   |     |  |  |         00100693          	addi	x13,x0,1
     ###                 if (((array[*current_vertex]<<(((i+j)&0b11)*8))&0xff) == *prev_node) {
 4c8:	   |     |  |  |  /----> 00d707b3          	add	x15,x14,x13
 4cc:	   |     |  |  |  |      0037f793          	andi	x15,x15,3
 4d0:	   |     |  |  |  |      00379793          	slli	x15,x15,0x3
 4d4:	   |     |  |  |  |      00ff17b3          	sll	x15,x30,x15
 4d8:	   |     |  |  |  |      0ff7f793          	andi	x15,x15,255
 4dc:	   |     |  |  |  |  /-- 02879263          	bne	x15,x8,500 <t1b_path_planner.c.375373cc+0x56>
     ###                     return (i+2)&0b11;
 4e0:	   |     |  |  |  |  |   00270793          	addi	x15,x14,2
 4e4:	   |     |  |  |  |  |   0037f793          	andi	x15,x15,3
     ###         START_POINT = turn_dir(path_planned,&prev_node,&current_vertex,&NODE_POINT);
 4e8:	   |     >--|--|--|--|-> 00f60023          	sb	x15,0(x12)
     ###         current_vertex = NODE_POINT;
 4ec:	   |     |  |  |  |  |   00864483          	lbu	x9,8(x12)
     ###     for (int i = idx -1; i >=0; i--) {
 4f0:	   |     |  |  |  |  |   fff58593          	addi	x11,x11,-1
     ###         current_vertex = NODE_POINT;
 4f4:	   |     |  |  |  |  |   0ff4f493          	andi	x9,x9,255
     ###         prev_node = current_vertex;
 4f8:	   |     |  |  |  |  |   00048413          	addi	x8,x9,0
     ###     for (int i = idx -1; i >=0; i--) {
 4fc:	   \-----|--|--|--|--|-- eadff06f          	jal	x0,3a8 <__ram_size+0x2a8>
     ###             for (uint8_t j = 1; j < 4; j++){
 500:	         |  |  |  |  \-> 00168693          	addi	x13,x13,1
 504:	         |  |  |  |      0ff6f693          	andi	x13,x13,255
 508:	         |  |  |  \----- fca690e3          	bne	x13,x10,4c8 <t1b_path_planner.c.375373cc+0x1e>
     ###     for (uint8_t i = 0; i < 4; i++){
 50c:	         |  |  \-------> 001e0e13          	addi	x28,x28,1
 510:	         |  \----------- faae10e3          	bne	x28,x10,4b0 <t1b_path_planner.c.375373cc+0x6>
     ###     return 0xff;   
 514:	         |               0ff00793          	addi	x15,x0,255
 518:	         \-------------- fd1ff06f          	jal	x0,4e8 <t1b_path_planner.c.375373cc+0x3e>

0000051c <array_index.constprop.0>:
     ###     return (arr[(n & 0xf8)>>3]&(0XF0000000>>((n&0x7)*4)))>>(~(n&0x7)*4); 
 51c:	00757793          	andi	x15,x10,7
 520:	00355513          	srli	x10,x10,0x3
 524:	00251513          	slli	x10,x10,0x2
 528:	02000737          	lui	x14,0x2000
 52c:	00a70733          	add	x14,x14,x10
 530:	0a872703          	lw	x14,168(x14) # 20000a8 <__bss_end+0xa8>
 534:	00279693          	slli	x13,x15,0x2
 538:	f0000537          	lui	x10,0xf0000
 53c:	00d55533          	srl	x10,x10,x13
 540:	fff7c793          	xori	x15,x15,-1
 544:	00e57533          	and	x10,x10,x14
 548:	00279793          	slli	x15,x15,0x2
 54c:	00f55533          	srl	x10,x10,x15
     ### } 
 550:	0ff57513          	andi	x10,x10,255
 554:	00008067          	jalr	x0,0(x1)

00000558 <array_write.constprop.0.isra.0>:
     ###     arr[(*n & 0xf8)>>3] = (arr[(*n & 0xf8)>>3]&~(0XF0000000>>((*n&0x7)*4))) | (val << (~(*n&0x7)*4));
 558:	00355713          	srli	x14,x10,0x3
 55c:	020007b7          	lui	x15,0x2000
 560:	0a878793          	addi	x15,x15,168 # 20000a8 <__bss_end+0xa8>
 564:	00757513          	andi	x10,x10,7
 568:	00271713          	slli	x14,x14,0x2
 56c:	00f70733          	add	x14,x14,x15
 570:	00251693          	slli	x13,x10,0x2
 574:	f00007b7          	lui	x15,0xf0000
 578:	00d7d7b3          	srl	x15,x15,x13
 57c:	00072683          	lw	x13,0(x14)
 580:	fff54513          	xori	x10,x10,-1
 584:	fff7c793          	xori	x15,x15,-1
 588:	00251513          	slli	x10,x10,0x2
 58c:	00d7f7b3          	and	x15,x15,x13
 590:	00a59533          	sll	x10,x11,x10
 594:	00a7e7b3          	or	x15,x15,x10
 598:	00f72023          	sw	x15,0(x14)
     ### }
 59c:	00008067          	jalr	x0,0(x1)

000005a0 <array_write8.isra.0>:
     ###     arr[(*n & 0xfc)>>2] = (arr[(*n & 0xfc)>>2]&~(0XFF000000>>((*n&0x3)*8))) | (val << (~(*n&0x3)*8));
 5a0:	0fc5f793          	andi	x15,x11,252
 5a4:	0035f593          	andi	x11,x11,3
 5a8:	00f50533          	add	x10,x10,x15
 5ac:	00359713          	slli	x14,x11,0x3
 5b0:	ff0007b7          	lui	x15,0xff000
 5b4:	00e7d7b3          	srl	x15,x15,x14
 5b8:	00052703          	lw	x14,0(x10)
 5bc:	fff5c593          	xori	x11,x11,-1
 5c0:	fff7c793          	xori	x15,x15,-1
 5c4:	00359593          	slli	x11,x11,0x3
 5c8:	00e7f7b3          	and	x15,x15,x14
 5cc:	00b615b3          	sll	x11,x12,x11
 5d0:	00b7e7b3          	or	x15,x15,x11
 5d4:	00f52023          	sw	x15,0(x10)
     ### }
 5d8:	00008067          	jalr	x0,0(x1)

000005dc <_set_tls>:
 5dc:	00050213          	addi	x4,x10,0
 5e0:	00008067          	jalr	x0,0(x1)

000005e4 <memcpy>:
 5e4:	       00050313          	addi	x6,x10,0
 5e8:	/----- 00060e63          	beq	x12,x0,604 <memcpy+0x20>
 5ec:	|  /-> 00058383          	lb	x7,0(x11)
 5f0:	|  |   00730023          	sb	x7,0(x6)
 5f4:	|  |   fff60613          	addi	x12,x12,-1
 5f8:	|  |   00130313          	addi	x6,x6,1
 5fc:	|  |   00158593          	addi	x11,x11,1
 600:	|  \-- fe0616e3          	bne	x12,x0,5ec <memcpy+0x8>
 604:	\----> 00008067          	jalr	x0,0(x1)

00000608 <memset>:
 608:	       00050313          	addi	x6,x10,0
 60c:	/----- 00060a63          	beq	x12,x0,620 <memset+0x18>
 610:	|  /-> 00b30023          	sb	x11,0(x6)
 614:	|  |   fff60613          	addi	x12,x12,-1
 618:	|  |   00130313          	addi	x6,x6,1
 61c:	|  \-- fe061ae3          	bne	x12,x0,610 <memset+0x8>
 620:	\----> 00008067          	jalr	x0,0(x1)

00000624 <__text_end>:
 624:	0000                	c.unimp
	...
